
# Source Code Extracted API/Manual
# --------------------------------
# API documentation generation script
# generates man-style documentation
# written by AnotherTest

# Start: ctr sman.ctr > ctr.1 ;mandoc -O style=ctrstyle.css -Thtml ctr.1 > docs.html ;mandoc -a ctr.1

Broom memoryLimit: 1024 * 1024 * 128.

Pen write: ('.TH "Citron v%s" 1 "%s" "The Citron programming language Manual"' formatObjects: [(Reflect version), (Clock new format: '%d %B %Y')]).
Pen writeln: 
?>
.SH NAME
ctr \- run a Citron program
.PP
citron \- interface to citron eval
.SH SYNOPSIS
ctr [PROGRAM]
.PP
citron [arguments]
.SH DESCRIPTION
Citron is a general purpose programming language for UNIX\-like operating systems.
.SH REFERENCE MANUAL
Citron has 5 literals:
.RS 4
.br
- Nil
.br
- Booleans (True, False)
.br
- Numbers (1, -2, 3.5)
.br
- Strings 'All Strings are UTF8!'
.br
- Code Blocks { parameters code }
.br

.SH BASIC INSTRUCTIONS
.SH ASSIGNMENT
.RE
Assignment in Citron has a few forms, a simple binding (variable is expression) or (variable := expression)
a strictly private binding (variable => expression) [Which can be used in constructor messages]
and a decomposition binding whose explanation follows:


Every object that implements the 'unpack:' method, hereon called 'decomposable' and 'algebraic',
is mostly a wrapper around smaller parts, for instance, an array is a container that only conatins some Objects.
It does not change the objects, nor does it have any other property that can cause us to be unable to recreate those objects
given said array. hence, we can deconstruct the array into its creating objects.


Consider an object. an object can be called a mapping from its property names as keys, to their values as, well, values.
much like a Map. However, since the object`s methods require a reference to it, they cannot be safely deconstructed.


this concept (algebraic decomposition) is done by creating a wireframe of sorts, and telling the object to deconstruct itself
based off that wireframe.
E.g.

.pp
.nf
.rs
var \fBtestMap\fR is Map cnew: {
		\fBtest\fR => [1,2,3,4,5].
		\fBkey1\fR => Map new put: \fBme\fR at: 'test'.
}.
.re
.rs
(Map cnew: {
		\fI#Take the third element from the right, and bind it to 'a'
		\fBtest\fR => ['*_', 'a', '_', '_'].
		\fI#Take the value at 'key1',
		#take its' value at 'test',
		#take its' value at 'test' and bind it to 'b'.\fR
		\fBkey1\fR => Map cnew: {\fBtest\fR => (Map cnew: {\fBtest\fR => 'b'.}).}
}) is \fBtestMap\fR.
.fi
.RE
.pp

Returning algebraic object types from functions, is often used to return several values from said function.
:: TODO : Finish this section.
.SH CORE MESSAGES
The following messages are part of the Core API of the Citron Programming Language:
.br
.PP
.SS
<?.

['../base.c', '../collections.c', '../file.c', '../generator.c', '../base_extensions.c', '../system.c', '../reflect.c', '../fiber.c'] fmap: {:v
    Pen writeln: '.BR\n$$v'.
	var f is File new: v.
	var str is f read.
	f close.
	str is str findPattern: '(?s)/\\*\\*(.*?)\\*/' do: {:p
		p @ 0 findPattern: '(?s)/\\*\\*@I_OBJ_DEF(.*?)\\*/' do: {:p
			Pen write: '.SH\n' + (p @ 1), brk.
			^''.
		}.
		(p at: 0, contains: '@internal') ifFalse: {
			Pen write: '.B '.
			Pen write: (p at: 1, split: '\n', fmap: {:s ^s skip: 2, replace: ':=' with: 'is'.}, join: '\n', trim), brk.
			Pen write: '.BR' + ('\n\n.PP\n.SS'), brk.
		}.
	}.
}.

Pen writeln:
?>
.SH BUGS
This is a preliminary version (< 1.0) of Citron, there might still be very serious bugs.
Please refrain from using this version in a production environment. This version of Citron
is still considered 'alpha' stage and cannot be expected to be reliable.

.SH AUTHOR
AnotherTest and the Citron Community (Nil)
.PP
devanothertest@gmail.com
<?.
