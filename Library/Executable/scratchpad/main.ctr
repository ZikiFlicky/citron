Broom memoryLimit: 1024 * 1024 * 1024 * 9.

import Library/GUI/TK.
import Library/Utils/Colors.

var syn is Program env: 'SCRATCHPAD_ENTHIGHLIGHT', isNil.

var helpString is Colors % [
                '---------------------------------------------------------\n' +
                '                      Scratchpad Help                    \n' +
                '                                                         \n' +
                '      Select some range and press F5 to execute it       \n' +
                '      Pressing F5 without selecting anything will        \n' +
                '      execute from the beginning of the line until       \n' +
                '      the cursor                                         \n' +
                '      the scratchpad theme can be modified by sending    \n' +
                '      ::\'beCurrent\' to the theme object                \n' +
                '      Tip: `PastelTheme beCurrent`                       \n' +
                '---------------------------------------------------------\n',
                \blue,
                \bright
                ].
var __eval_context is Object cnew: {
    var Themes is my Themes is Map new.
    var Theme is Object cnew: {
      on: 'initWithName:' do: {:name
        const Themes put: me at: name.
        bgcolor => 'white'.
        fgcolor => 'red'.
        palette => Map new
          put: 'black'  at: 'black', put: 'red'     at: 'red',
          put: 'green'  at: 'green', put: 'yellow'  at: 'yellow',
          put: 'blue'   at: 'blue' , put: 'purple'  at: 'purple',
          put: 'cyan'   at: 'cyan' , put: 'white'   at: 'white',
          put: 'black'  at: 'Black', put: 'red'     at: 'Red',
          put: 'green'  at: 'Green', put: 'yellow'  at: 'Yellow',
          put: 'blue'   at: 'Blue' , put: 'purple'  at: 'Purple',
          put: 'cyan'   at: 'Cyan' , put: 'white'   at: 'White'.
      }, initWithName: 'Base'.
      on: 'describe' do: {
        ^'Theme{bg: %s, fg: %s} {palette = (%L)}' % [my bgcolor, my fgcolor, (my palette kvlist: \:kv '%s: %s' % kv)].
      }.
      on: 'beCurrent' do: {
        Scratchpad currentTheme: me.
        Tcl eval: '.text configure -background "%s" -foreground "%s"' % [my bgcolor, my fgcolor].
        my palette each: {:name:color
          Tcl eval: '_.text tag configure %s -%s "%s"' % [name, (name lower = name either: 'foreground' or: 'background'), color].
        }.
      }.
    }.
    my DefaultTheme is Theme cnew: {
      initWithName: 'Default'.

      bgcolor => 'white'.
      fgcolor => 'black'.
    }.
    my PastelTheme is Theme cnew: {
      initWithName: 'Pastel'.

      bgcolor => '#7789cb'.
      fgcolor => 'black'.
    }.
    my MonokaiTheme is Theme cnew: {
      initWithName: 'Monokai'.

      bgcolor => '#272822'.
      fgcolor => '#F8F8F2'.
      my palette
        put: '#E6DB74' at: 'yellow', put: '#AE81FF' at: 'purple',
        put: '#F92672' at: 'red',    put: '#66D9EF' at: 'cyan',
        put: '#A6E22E' at: 'green',  put: '#005aaa' at: 'blue',
        put: '#E6DB74' at: 'Yellow', put: '#AE81FF' at: 'Purple',
        put: '#F92672' at: 'Red',    put: '#66D9EF' at: 'Cyan',
        put: '#A6E22E' at: 'Green',  put: '#005aaa' at: 'Blue'.
    }.
    my Scratchpad is Object cnew: {
        currentTheme => const DefaultTheme.
        on: 'help' do: {\ helpString }.
        genAccessors: ['currentTheme'].
        on: 'exit' do: {
            Program exit.
        }.
    }.
}.

var evaluate-or-error is {\:code
  Reflect run: {:code ^code eval.} inContextAsMain: __eval_context arguments: [code].
} catch: {:e ^Colors % [e toString, \red].}.

var load-and-apply-theme is Tcl fnOf: {\:code :obj
  code is code rightTrim ~ 's/\\.$//'.
  { obj is Reflect run: {:code ^('( $$code ) beCurrent') eval.} inContextAsMain: __eval_context arguments: [code]. } catch: {:e
    Tcl eval: 'ERROR { $$e }'.
  }, run.
  ^obj.
}.

import Library/Utils/Highlight.
var highlight is Tcl fnOf: {:txt ^Highlight highlight: txt html: False.}.

Tcl proc: 'colorize' args: [] body: (
   ?>
   set ins [.text index insert]
   set init [expr "floor($ins)"]
   set txt [%s [.text get $init $ins]]
   .text delete $init $ins
   .text mark set index $init
   .text insert $init $txt
   <? % [highlight]
 ).

Tcl proc: 'ctrExecute' args: [] body: (
  ?>
  set range [.text tag ranges sel]
  if {[llength $range] == 0} {
    set ins [.text index insert]
    set init [expr "floor($ins)"]
    set range [list $init $ins]
  }
  set txt [regsub {\.$} [string trimright [.text get {*}$range]] {}]
  set end [lindex $range 1]
  # Terrible terrible, get the start of next line
  set nextline [expr "floor($end+1)"]
  # magically execute this thing
  set result "[%s $txt]"
  .text tag remove sel 0.0 end
  .text insert $nextline "\n"
  .text insert $nextline $result
  set endtag [.text index insert]
  .text tag add sel $nextline $endtag
  .text mark set insert $endtag
  <? % [(Tcl fnOf: {:code
    ^evaluate-or-error[code].
  })]
).

Tcl proc: 'handle_menu' args: ['w'] body: (
  ?>
    $w add command -label save -command %s
    $w add command -label load -command %s
    $w add command -label "load theme" -command %s
  <? % [
    (Tcl fnOf: {
      Tcl eval: '%s [tk_getSaveFile -defaultextension ctr -title "Save into..."]' % [(Tcl fnOf: {:path
        path = '' ifTrue: { ^Nil. }.
        Tcl eval: '%s [.text get 0.0 end]' % [(Tcl fnOf: {:data
          File new: const path, write: data, close.
        })].
      })].
    }),
    (Tcl fnOf: {
      Tcl eval: 'set path [tk_getOpenFile -title "Load from..."]'.
      Tcl eval: 'if {$path == ""} { return }'.
      Tcl eval: 'set file [open $path r]'.
      Tcl eval: 'set data [read $file]'.
      Tcl eval: 'close $file'.
      Tcl eval: '.text delete 0.0 end'.
      Tcl eval: '.text insert 0.0 [$$highlight $data]'.
    }),
    (Tcl fnOf: {
      Tcl eval: 'set path [tk_getOpenFile -title "Load from..."]'.
      Tcl eval: 'if {$path == ""} { return }'.
      Tcl eval: 'set file [open $path r]'.
      Tcl eval: 'set data [read $file]'.
      Tcl eval: 'close $file'.
      Tcl eval: '%s $data' % [load-and-apply-theme].
    })
  ]
).

Tcl eval: ?>
source ansicolor.tcl
wm title . "Citron Scratchpad"
menu .menu -type menubar
pack .menu -side top -fill both
handle_menu .menu
ansicolor::text .text -yscrollcommand ".scroll set" -setgrid true
bind .text <KeyRelease-F5> "ctrExecute"
<?
+ (syn either: 'bind .text <KeyRelease> colorize' or: 'bind .text <Return> colorize')
+
?>
scrollbar .scroll -command ".text yview"
pack .scroll -side right -fill y
pack .text -expand yes -fill both
<?.

evaluate-or-error['DefaultTheme beCurrent'].

Tcl eval: '.text insert 0.0 {' + helpString + '}'.

{^True.} whileTrue: {
  Tcl update.
}.
