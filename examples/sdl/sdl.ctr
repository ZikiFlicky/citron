Broom autoAlloc: True.
var sdl is SDL new set: 'windowName' to: 'What? SDL? what sorcery is this?', set: 'windowWidth' to: 100, set: 'windowHeight' to: 50.
# Map on: 'respondTo:' do: {:msg
#   ^(msg at: 0, = '@') either: {^const me at: (msg skip: 1).} or: {^const me `respondTo: msg.}.
# }.
var colors is Map new
  put: (Color rgb: [255, 0, 0]) at: 'red',
  put: (Color rgb: [0, 255, 0]) at: 'green',
  put: (Color rgb: [0, 0, 255]) at: 'blue',
  put: (Color rgb: [0] * 3) at: 'black',
  put: (Color rgb: [255] * 3) at: 'white',
  put: (Color rgb: [255, 192, 203]) at: 'pink',
  put: (Color rgb: [255, 0, 255]) at: 'magenta',
  put: (Color rgb: [128, 0, 128]) at: 'purple'.

Pen writeln: (colors at: 'purple').
[height, width] is ['windowHeight', 'windowWidth'] fmap: {:p ^Reflect getProperty: p ofObject: sdl, / 2.}.
var rects is [[0, 0], [0, width], [height, 0], [height, width]] fmap: {:x
  ^sdl message: 'newRectWithX:andY:andW:andH:' arguments: x reverse + [width, height].
}.
var colorFor is {:x:y
  ^(x > y) either: (colors at: 'red') or: (colors at: 'blue').
}.
var window is sdl init.

(2 * width) times: {:x
  (2 * height) times: {:y
    window setPixelWithX: x andY: y toColor: (colorFor applyTo: x and: y).
    Pen writeln: [x, y].
  }.
  window update.
}.

Program waitForInput.
sdl quit.
