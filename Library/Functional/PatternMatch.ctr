Object on: 'match:' do: {:self:ast
  #ast -> $[
  # [pattern, guard*, consequence],
  # [pattern, guard*, consequence]
  # ...
  #]
  #pattern -> quoted (or literal) expression
  #guard -> expression
  #consequence -> expression
  var done is True.
  var ret is Nil.
  var cblk is thisBlock.
  ast each_v: {:__PMATCH_V0
    __PMATCH_V0 is $!(__PMATCH_V0). #Parse the tuple
    done is True.
    ret is {
      self unpack: $!(__PMATCH_V0 head).
      $!(__PMATCH_V0 tail init) all: (\:__PMATCH_V1 Reflect runHere: {^$!(__PMATCH_V1).} forObject: self arguments: []), ifFalse: {
        cblk error: 'guard fail'.
      }.
      ^Reflect runHere: {^$!(__PMATCH_V0 last).} forObject: self arguments: [].
    } catch: {:e done is False. }, run.
    done break.
  }.
  done ifFalse: { cblk error: 'non-exhaustive pattern match'. }.
  ^ret.
}.

Object on: 'on:pdo:' do: {:msg:ast
  #ast -> $[
  # [pattern, guard*, return],
  # [pattern, guard*, return]
  # ...
  #]
  #pattern -> Array of quoted or literal expression
  var blk is $!$({:*args
    ^args match: $`(ast).
  }).
  me on: msg do: blk.
}.
