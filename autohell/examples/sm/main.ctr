import Library/Data/SwitchCase.

var SM is Object new.
SM on: 'initStates:start:transitions:ends:' do: {:ss:st:ts:fs
  my states is ss.
  my start is st.
  my transitions is ts.
  my ends is fs.
}.
SM on: 'process:' do: {:input
  input is input characters.
  var state is my start.
  var transitions is my transitions.
  {\ (input count > 0) & (state isNil not) } whileTrue: {
    var tr is transitions at: state.
    tr isNil not ifTrue: {
      Pen write: '$$state => '.
      state is tr applyTo: input pop.
      Pen writeln: '$$state'.
    }, else: {
      True break.
    }.
  }.
  ^(my ends contains: state).
}.

var ts is Map new
  put: {:in
    ^in case: 'a' do: { ^'test'. },
        case: 'b' do: { ^'shit'. },
        default:      { ^'start'. },
        switch.
  } at: 'start',
  put: {:in
    ^in case: 'b' do: { ^'test'. },
        case: 'a' do: { ^'shit'. },
        default:      { ^'shit'. },
        switch.
  } at: 'shit',
  put: {:in
    ^'start'.
  } at: 'test'.

var sm is SM
  initStates: ['shit', 'test']
  start: 'start'
  transitions: ts
  ends: ['test'].

Pen writeln: (sm process: 'aaba').
