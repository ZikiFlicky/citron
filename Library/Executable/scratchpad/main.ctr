Broom memoryLimit: 1024 * 1024 * 1024.

import Library/GUI/TK.
import Library/Utils/Colors.

var syn is Program env: 'SCRATCHPAD_SHIGH', isNil not.

var helpString is Colors % [
                '-----------------------\n' +
                '----Scratchpad Help----\n' +
                '-----------------------\n' +
                'Select some range and press F5 to execute it\n' +
                'Pressing F5 without selecting anything will execute from the beginning of the line until the cursor\n' +
                '-----------------------\n',
                \blue
                ].
var __eval_context is Object cnew: {
    my Scratchpad is Object cnew: {
        on: 'help' do: {\
            ^helpString.
        }.
        on: 'exit' do: {
            Program exit.
        }.
    }.
}.

var evaluate-or-error is {\:code
  Reflect run: {:code ^code eval.} inContextAsMain: __eval_context arguments: [code].
} catch: {:e ^Colors % [e toString, \red].}.


syn ifTrue: {
  import Library/Utils/Highlight.
  var highlight is Tcl fnOf: {:txt ^Highlight highlight: txt html: False.}.
  Tcl proc: 'colorize' args: [] body: (
     ?>
     set ins [.text index insert]
     set init [expr "floor($ins)"]
     set txt [%s [.text get $init $ins]]
     puts $txt
     .text delete $init $ins
     .text mark set index $init
     .text insert $init $txt
     <? % [highlight]
   ).
}.

Tcl proc: 'ctrExecute' args: [] body: (
  ?>
  set range [.text tag ranges sel]
  if {[llength $range] == 0} {
    set ins [.text index insert]
    set init [expr "floor($ins)"]
    set range [list $init $ins]
  }
  set txt [.text get {*}$range]
  set end [lindex $range 1]
  # Terrible terrible, get the start of next line
  set nextline [expr "floor($end+1)"]
  # magically execute this thing
  set result "[%s $txt]"
  .text tag remove sel 0.0 end
  .text insert $nextline "\n"
  .text insert $nextline $result
  set endtag [.text index insert]
  .text tag add sel $nextline $endtag
  .text mark set insert $endtag
  <? % [(Tcl fnOf: {:code
    ^evaluate-or-error[code].
  })]
).

Tcl eval: ?>
source ansicolor.tcl
wm title . "Citron Scratchpad"
ansicolor::text .text -yscrollcommand ".scroll set" -setgrid true
bind .text <KeyRelease-F5> "ctrExecute"
<?
+ (syn either: 'bind .text <Return> colorize' or: '')
+
?>
scrollbar .scroll -command ".text yview"
pack .scroll -side right -fill y
pack .text -expand yes -fill both
<?.

Tcl eval: '.text insert 0.0 {' + helpString + '}'.

{^True.} whileTrue: {
  Tcl update.
}.
