import Library/Utils/Colors.

var Highlight is Object new.
Highlight on: 'highlight:' do: {:code
  var returned is ''.
  var Tokens is AST feedLexer: code.
  var token is AST token.
  var done is False.
  var last_toc is 'FIN'.
  var messageAcceptors is ['BLOCKCLOSE', 'BOOLEANNO', 'BOOLEANYES', 'CHAIN', 'NIL', 'NUMBER', 'PARCLOSE', 'QUOTE', 'REF', 'TUPCLOSE'].
  {^done.} whileFalse: {
    var skip is False.
    var this_thing is ''.
    var rlen is Colors stripColors: returned, length.
    var color is ''.
    var last_toc_override is Nil.
    var after_color is ''.
    token @ 0
       case: 'RET' do: {
        color is (Colors bold) + (Colors magenta).
        after_color is Colors unbold.
        this_thing is '^'.
    }, case: 'ASSIGNMENT' do: {
        # rlen +=: 1.
        color is (Colors bold) + (Colors magenta).
        after_color is Colors unbold.
        this_thing is 'is'.
    }, case: 'PASSIGNMENT' do: {
        # rlen +=: 1.
        color is (Colors bold) + (Colors magenta).
        after_color is Colors unbold.
        this_thing is '=>'.
    }, case: 'BLOCKCLOSE' do: {
        color is (Colors bold) + (Colors lightGreen).
        after_color is (Colors unbold).
        this_thing is '}'.
    }, case: 'BLOCKOPEN' do: {
        color is (Colors bold) + (Colors lightGreen).
        after_color is (Colors unbold).
        this_thing is '{'.
    }, case: 'BLOCKOPEN_MAP' do: {
        color is (Colors bold) + (Colors lightGreen).
        after_color is (Colors unbold).
        this_thing is ?>{\<?.
        last_toc_override is 'BLOCKOPEN'.
    }, case: 'BOOLEANNO' do: {
    color is Colors magenta.
        this_thing is 'False'.
    }, case: 'BOOLEANYES' do: {
    color is Colors magenta.
        this_thing is 'True'.
    }, case: 'CHAIN' do: {
        this_thing is ','.
        rlen +=: 1.
    }, case: 'COLON' do: {
        this_thing is ':'.
        (last_toc = 'BLOCKOPEN') | (last_toc = 'PARAMN') ifTrue: {
          color is Colors lightMagenta.
          last_toc_override is 'PARAMC'.
        }, else: {
          color is Colors magenta.
        }.
        rlen +=: 1.
    }, case: 'DOT' do: {
        this_thing is '.'.
        rlen +=: 1.
    }, case: 'FIN' do: {
        done is True.
    }, case: 'NIL' do: {
    color is Colors magenta.
        this_thing is 'Nil'.
    }, case: 'NUMBER' do: {
    color is Colors green.
        this_thing is (token @ 1) .
    }, case: 'PARCLOSE' do: {
        color is (Colors bold) + (Colors lightGreen).
        after_color is (Colors unbold).
        this_thing is ')'.
    }, case: 'PAROPEN' do: {
        color is (Colors bold) + (Colors lightGreen).
        after_color is (Colors unbold).
        this_thing is '('.
    }, case: 'QUOTE' do: {
        this_thing is ''.
        var string is AST getlexbuf.
        var in_escape is False.
        var begin is '\''.
        var maybe_in_quot is False.
        string characters each_v: {:c
          maybe_in_quot ifTrue: {
            maybe_in_quot is False.
            (c = '?') ifTrue: {
              this_thing append: c.
              begin is '?>'.
              rlen -=: 1.
              True break.
            }.
          }.
          (c = '\'') & (in_escape not) ifTrue: { this_thing append: c. True break. }.
          (c = '<') ifTrue: {
            this_thing append: c.
            maybe_in_quot is True.
            True continue.
          }.
          (c = '\\') ifTrue: {
            in_escape ifTrue: {
              in_escape is False.
              True continue.
            }, else: {
              in_escape is True.
            }.
          }.
            in_escape ifTrue: {
              this_thing append: c.
              in_escape is False.
              True continue.
            }.
            this_thing append: c.
        }.
        AST lexSkip: this_thing length.
        token put: AST lexpos - (begin length - 1) at: 2.
        color is Colors yellow.
        this_thing is begin + this_thing.
    }, case: 'REF' do: {
        (last_toc = 'PARAMC') ifTrue: {
          color is (Colors bold) + (Colors lightMagenta).
          after_color is (Colors unbold).
          this_thing is token @ 1.
          last_toc_override is 'PARAMN'.
        }, else: {
          var next is AST token.
          (next @ 0 !=: 'FIN') ifTrue: {AST lexPutBack.}.
          this_thing is (next @ 0 = 'COLON') either: {
            color is Colors lightMagenta.
            AST lexSkip: 1.
            token put: (token @ 2 + 1) at: 2.
            last_toc_override is 'MESSAGE'.
            ^token @ 1 + ':'.
          } or: {
            ^(messageAcceptors contains: last_toc) either: {
              ((token @ 1) length = 1) ifTrue: {last_toc_override is 'MESSAGE'.}.
              ((token @ 1) indexOf: ':', !=: -1) ifTrue: {
                # token put: (token @ 2) at: 2.
                token put: (token @ 1 + ':') at: 1.
              }.
              color is Colors lightMagenta.
              ^token @ 1.
            } or: {
              # Pen writeln: [token, last_toc, next].
              ^(token @ 1 @ 0) = ((token @ 1 @ 0) upper) either: {
                color is Colors magenta.
                ^(token @ 1) .
              } or: {
                ^['me', 'my', 'const', 'var'] contains: token @ 1, either: {
                  last_toc_override is 'QUAL'.
                  color is Colors lightBlue.
                  ^(token @ 1) .
                } or: {
                  ^(token @ 1).
                }.
              }.
            }.
          }.
        }.
          # this_thing is (token @ 1).
    }, case: 'TUPOPEN' do: {
        this_thing is '['.
    }, case: 'TUPCLOSE' do: {
        this_thing is ']'.
    }, case: 'SYMBOL' do: {
        color is Colors lightGreen.
        var t is AST token.
        token put: (t @ 2) at: 2.
        this_thing is '\\' + (t @ 1).
    }, default: {
        # Pen writeln: token.
        this_thing is token @ 1.
    }, switch.
    # Pen writeln: [token, this_thing, rlen].
    returned +=: ' ' * ((token @ 2) - rlen - (this_thing length)).
    returned +=: color + this_thing + (Colors resetColor) + (after_color).
    last_toc is last_toc_override or: token @ 0.
    skip continue.
    token is AST token.
  }.
  ^returned.
}.

import export: Highlight as: 'Highlight'.
