#Number operations should not leak memory

usedMemory1 := 0.
usedMemory2 := 0.
usedMemory3 := 0.
usedMemory4 := 0.

Broom mode: 0.

Number on: 'add:' do: { :x
	me +=: x.
}.

Number on: 'subtract:' do: { :x
	me -=: x.
}.

Number on: 'multiplyBy:' do: { :x
	me *=: x.
}.

Number on: 'divideBy:' do: { :x
	me /=: x.
}.


a := 1.
a := a + 1.       #2
a add: 3.         #5
a := a - 1.       #4
a subtract: -0.5. #4.5
a := a * 2.       #9
a divideBy: 3.    #3
a := a / 0.1.     #30
a := a - -1.      #31
a multiplyBy: 0.5.#15.5
a := a + (2 toPowerOf: 8).  #271.5
a := a + (2 toPowerOf: -1). #272
a := a + (49 sqrt).   #279
a add: (0 max: 1).          #280
a add: (2 min: 3).          #282
Pen write: a.

Broom sweep.

usedMemory1 := Broom keptAlloc.
#Pen write: usedMemory1, brk.

a := 1.
a := a + 1.       #2
a add: 3.         #5
a := a - 1.       #4
a subtract: -0.5. #4.5
a := a * 2.       #9
a divideBy: 3.    #3
a := a / 0.1.     #30
a := a - -1.      #31
a multiplyBy: 0.5.#15.5
a := a + (2 toPowerOf: 8).  #271.5
a := a + (2 toPowerOf: -1). #272
a := a + (49 sqrt).   #279
a add: (0 max: 1).          #280
a add: (2 min: 3).          #282
Pen write: a.

Broom sweep.
usedMemory2 := Broom keptAlloc.
#Pen write: usedMemory2, brk.

a := 1.
a := a + 1.       #2
a add: 3.         #5
a := a - 1.       #4
a subtract: -0.5. #4.5
a := a * 2.       #9
a divideBy: 3.    #3
a := a / 0.1.     #30
a := a - -1.      #31
a multiplyBy: 0.5.#15.5
a := a + (2 toPowerOf: 8).  #271.5
a := a + (2 toPowerOf: -1). #272
a := a + (49 sqrt).   #279
a add: (0 max: 1).          #280
a add: (2 min: 3).          #282
Pen write: a.

Broom sweep.
usedMemory3 := Broom keptAlloc.
#Pen write: usedMemory3, brk.

#memory counters need to be equal!
( usedMemory1 = usedMemory2 and: usedMemory1 = usedMemory3, and: usedMemory2 = usedMemory3 ) ifTrue: {
	Pen write: 'No memory leaks here'.
}, ifFalse: {
	Pen write: 'Leaking memory...'.
}.
