#:language XFrozen

var ast2ctrcode is {:self:ast:curindent
  curindent is curindent or: 0.
  ^(frozen __ is
    case: 'LTRNUM' do: {
      ^ast value.
    },
    case: 'LTRSTRING' do: {
      var value is ast value.
      ^'\'%s\'' % [value ~ 's/(?!\\\\)\'/\\\'/g'].
    },
    case: 'LTRNIL' do: {
      ^'Nil'.
    },
    case: 'LTRBOOLTRUE' do: {
      ^'True'.
    },
    case: 'LTRBOOLFALSE' do: {
      ^'False'.
    },
    case: 'REFERENCE' do: {
      var value is ast value.
      ^(frozen __ is
        case: 'My'     do: {\ 'my %s' },
        case: 'Var'    do: {\ 'var %s' },
        case: 'Const'  do: {\ 'const %s' },
        case: 'Frozen' do: {\ 'frozen %s' },
        default: {\ '%s' }) switch: ast modifier, % [value].
    },
    case: 'EXPRMESSAGE' do: {
      var rec is self[ast @ 0, curindent].
      var ct is ast count.
      ct - 1 times: {:i
        var s is ast @ (i + 1).
        rec +=: ' ' + self[s, curindent].
        i !=: ct - 2, & (s type = 'KWMESSAGE') ifTrue: { rec +=: ','. }.
      }.
      ^rec.
    },
    case: 'UNAMESSAGE' do: {
      ^ast value.
    },
    case: 'BINMESSAGE' do: {
      ^ast value + ' ' + self[ast @ 0, curindent].
    },
    case: 'KWMESSAGE' do: {
      var value is ast value split: ':'.
      ^value imap: \:i:x '%s: %s' % [x, self[ast @ i, curindent]], join: ' '.
    },
    case: 'EXPRASSIGNMENT' do: {
      var ref is self[(ast at: 0), curindent].
      var _value is self[(ast at: 1), curindent].
      ^_value length > 0 either: { ^'%s is %s' % [ref, _value]. } or: ref.
    },
    case: 'SYMBOL' do: {
      ^'\\' + ast value.
    },
    case: 'NESTED' do: {
      var code is '('.
      var ps is ast at: 0.
      var tcode is self[ps, curindent].
      tcode length > 80 ifTrue: { code +=: '\n' + ('  ' * (curindent + 1)). }.
      code +=: tcode.
      ^code + ')'.
    },
    case: 'CODEBLOCK' do: {
      var ps is ast at: 0.
      var ins is ast at: 1.
      var fmt is ast modifier = 'My' either: '{\\%:L\n%s%:L\n%s}' or: '{%:L\n%s%:L\n%s}'.
      var cindent is '  ' * (curindent +=: 1).
      ^fmt % ['',
              (Array new fill: ps count with: \:x ':' + (ps @ x) value),
              cindent,
              '\n' + cindent,
              (Array new fill: ins count with: \:x self[ins @ x, curindent] + '.'),
              '  ' * (curindent - 1)
            ].
    },
    case: 'PROGRAM' do: {
      ^(Array new fill: ast count with: \:x self[ast @ x, curindent + 1] + '.') join: '\n' + ('  ' * curindent).
    },
    case: 'ENDOFPROGRAM' do: { ^''. },
    case: 'RETURNFROMBLOCK' do: { ^'^' + self[ast @ 0, curindent]. },
    case: 'IMMUTABLE' do: {
      var code is '['.
      var ps is ast at: 0.
      var pcount is ps count.
      (Array new fill: pcount with: \:i self[ps @ i, curindent]) each_v: {:gen
        var tcode is code + gen + ', '.
        tcode split: '\n', last length > 80 ifTrue: { tcode is code + '\n' + ('  ' * (curindent + 1)) + gen + ', '. }.
        code is tcode.
      }.
      pcount > 0 ifTrue: { code is code from: 0 to: code length - 2. }.
      code split: '\n', last length > 80 ifTrue: { code +=: '\n'. }.
      ^code + ']'.
    },
    default: { errPen red writeln: '$$ast is not unparsable at the moment ( because of $$value )', resetColor. }) switch: ast type.
}.
