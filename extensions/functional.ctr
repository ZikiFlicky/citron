({^contextPurity.} catch: {Reflect addGlobalVariable: 'contextPurity'. contextPurity is True. ^contextPurity.}) ifTrue: {
  Broom mode: 0.

  # TODO :: Actually fix scoping first
  Reflect addGlobalVariable: '$'.
  $ is {:x:f ^f " x.}.

  Array on: 'fmap:' do: { :f
    var newarr is Array new.
    me each: { :i :v :a
      #var ff is (Reflect copyBlock: f).
      newarr push: (f applyTo: v).
    }.
    ^newarr.
  }.

  Array on: 'skip:' do: { :i
    ^me from: i length: (me count - i).
  }.

  Array on: 'takeWhile:' do: { :f
    var newarr is Array new.
    var curr_elem is Array new < 0 ; (me @ 0).
    var c is 0.
    var end is (me count) - 1.
    var self is me.
    {^(c < end). } whileTrue: {
      c +=: 1.
      curr_elem is Array new < c ; (self @ c).
      var res is (f message: 'applyTo:and:' arguments: curr_elem).
      res not break.
      newarr push: (self @ c).
    }.
    ^newarr.
  }.
  Array on: 'skipWhile:' do: { :f
    var curr_elem is Array new < 0 ; (me @ 0).
    var c is 0.
    var end is (me count) - 1.
    var self is me.
    {^(c < end). } whileTrue: {
      c +=: 1.
      curr_elem is Array new < c ; (self @ c).
      var res is (f message: 'applyTo:and:' arguments: curr_elem).
      res not break.
    }.
    ^(me from: c length: (end + 1 - c)).
  }.


  CodeBlock on: 'curryFirst:' do: { :arg
    var self is me.
    var margs is Reflect argumentListOf: me.
    var rcount is (margs count - 1).
    var curried is CodeBlock new.
    var __inher is (Map new) put: self at: 'self'.
    (rcount > 0) ifTrue:{
      margs shift.
      var args_rest is (rcount > 1) either: (((Array new < 'and:') * (rcount - 1)) join: '') or: ''.
      var msg is '\'' + 'applyTo:$$args_rest' + '\''.
      var args is Array new < arg.
      __inher put: args at: 'args', put: margs at: 'margs'.
      var cstring is '({' + ((margs fmap: {:v ^':$$v'.}) join: ' ') + ' var self is my inheritance @ \'self\'. var args is my inheritance @ \'args\'. var margs is my inheritance @ \'margs\'. ^self message: ' + msg +  ' arguments: (args + (Array new < ' + ((margs fmap: {:v ^'$$v'.}) join: ' ; ') + ')).})'.
      #Pen write: cstring, brk.
      curried is cstring eval.
    }.
    (rcount = 0) ifTrue: {
      var args is Array new < arg.
      curried is { ^my self message: 'applyTo:' arguments: my args. }.
      curried set: 'args' value: args.
    }.
    curried set: 'inheritance' value: __inher.
    curried on: 'setSelf:' do: {:self my inheritance put: self at: 'self'.}.
    var temp is curried.
    curried is Nil.
    ^temp.
  }.

  # CodeBlock on: 'curryLast:' do: { :arg
  #   var self is me.
  #   var margs is Reflect argumentListOf: me.
  #   var rcount is (margs count - 1).
  #   var curried is CodeBlock new.
  #   var args is Array new < arg.
  #   (rcount > 0) ifTrue:{
  #     margs pop.
  #     var args_rest is (rcount > 1) either: (((Array new < 'and:') * (rcount - 1)) join: '') or: ''.
  #     var msg is '\'' + 'applyTo:$$args_rest' + '\''.
  #     var cstring is '{' + ((margs fmap: {:v ^':$$v'.}) join: ' ') + ' ^my self message: ' + msg +  ' arguments: ((my margs fmap: { :fmap_param_v_temp ^Reflect getObject: fmap_param_v_temp. }) + my args).} ' + 'set: \'args\' value: args, set: \'margs\' value: margs'.
  #     Pen write: cstring, brk.
  #     curried is cstring eval.
  #   }.
  #   (rcount = 0) ifTrue: {
  #     curried is { ^my self message: 'applyTo:' arguments: my args. }.
  #     curried set: 'args' value: args.
  #   }.
  #   curried set: 'self' value: self.
  #   var temp is curried.
  #   curried is Nil.
  #   ^temp.
  # }.

  CodeBlock on: 'compose:' do: { :f
    # ((((Reflect argumentListOf: f, filter_v: {:v ^v !=: 'self'.}) count) !=: 1) | (((Reflect argumentListOf: me, filter_v: {:v ^v !=: 'self'.}) count) !=: 1)) ifTrue: {thisBlock error: 'Composed functions can have only one argument.'.}.
    var self is me.
    var composite is { :i ^my self applyTo: (my f applyTo: i). }.
    composite set: 'self' value: self.
    composite set: 'f' value: f.
    ^composite.
  }.

  CodeBlock learn: '<' means: 'compose:'.

  CodeBlock on: 'oneToOneComposeSelf:' do: {:args
    var str is '('.
    args each: { :i :a
      var ending is ')) <'.
      str append: (' (me apply: (args @ $$i$$ending').
    }.
    str is (str from: 0 length: (str length - 2)) + ' )'.
    var x is str eval.
    ^x.
  }.

  var pure is {:i ^i.}.

  var Record is Object new.
  Record on: 'new' do: {
    {contextPurity ifFalse: { thisBlock error: 'CTX_NOT_PURE'.}.} catch: {:err (err = 'CTX_NOT_PURE') ifTrue: {thisBlock error: err.}. Reflect addGlobalVariable: 'contextPurity'. contextPurity is True.}, run.
    ^me `new. #`
  }.
  Record on: 'initWithName:' do: {:typename my typename is typename. my typemap is Map new.}.
  Record on: 'type' do: {^my typename toString.}.
  Record on: 'isNil' do: {^False.}.
  Record on: 'get:' do: { :field
    ^my typemap @ field.
  }.
  Record on: 'set:to:' do: {:field :val
    ((Reflect getPropertiesOf: my typemap) contains: field) ifFalse: {thisBlock error: 'record does not contain field $$field'.}.
    my typemap put: val at: field.
  }.
  Record on: 'toString' do: {
    var map is ''.
    my typemap each: { :k :v map append: '$$k' + ': $$v'. map append: ', '.}.
    var type is (me type).
    map is ('Record $$type {') + (map from: 0 to: (map length - 2)) + '}'.
    ^map.
  }.

  Record on: 'respondTo:' do: { :msg
    var ret is my typemap @ msg.
    var self is me.
    var typemap is my typemap.
    var map_put is {:v :k typemap put: v at: k. }.
    ret isNil ifTrue: {
      var fieldarr is msg toString split: ';'.
      fieldarr each: { :i :v map_put applyTo: Nil and: v.}.
      ^ret is self.
    }.
    ^ret.
  }.

  Record on: 'respondTo:and:' do: { :msg :thing
    ^me respondTo: msg.
  }.

  Record on: 'respondTo:and:and:' do: { :msg :thing :thing2
    ^me respondTo: msg.
  }.

  CodeBlock on: 'apply:' do: { :arg
    var ret is Nil.
    var self is me.
    (((Reflect argumentListOf: me) count) = 1) ifTrue: {
      ret is (self applyTo: arg).
    }, ifFalse: {
      #Pen write: ((Reflect argumentListOf: me) count), brk.
      ret is (self curryFirst: arg).
    }.
    ^ret.
  }.

  CodeBlock learn: '"' means: 'apply:'.

  var Iterable is Object new.
  Iterable on: 'init:valuegen:seed:' do: {:iter :nv :seed my func is iter. my nv is nv. my seed is seed.}.
  Iterable on: 'next' do: {
    var result is Nil.
    var r is ({result is (my func applyTo: my seed).} set: 'func' value: my func, set: 'seed' value: my seed).
    r catch: {result is Nil.}, run.
    my seed is my nv applyTo: my seed.
    ^result.
  }.
  Iterable on: 'from:length:' do: {:f :c
    var self is me.
    {^my seed < f.} whileTrue: {self next.}.
    ^Array with: {^self next.} count: length.
  }.
  Iterable on: 'take:' do: { :count
    var arr is Array new.
    var self is me.
    count times: {arr push: (self next).}.
    ^arr.
  }.
  Iterable on: 'untilNil' do: {
    var ret is Array new.
    var v is me next.
    var self is me.
    {^v isNil.} whileFalse: {ret push: v. v is self next.}.
    ^ret.
  }.
  Iterable on: 'skipWhile:' do: {:cond
    var next is me next.
    {^cond " (next is me next).} whileTrue: { }. #"
    ^next.
  }.
  var iterate is { :block :nv :seed
    var iter is Iterable new.
    ^iter init: block valuegen: nv seed: seed.
  }.

  #Arith.
  var add is {:i :j ^i + j.}.
  var sub is {:i :j ^i - j.}.
  var mul is {:i :j ^i * j.}.
  var div is {:i :j ^i / j.}.
  var pow is {:i :j ^i pow: j.}.

  #Logic
  var not is {:i ^(i toBoolean not). }.
  var lt is  {:j :i ^(i < j).}.
  var gte is {:j :i ^(i >=: j).}.
  var gt is  {:j :i ^(i > j).}.
  var lte is {:j :i ^(i <=: j).}.
  var preturn is {:i Pen write: i, brk. ^i.}.
  #Seq.
  var filter is {:cond :coll
    #var func is iterate " ({:i ^my cond applyTo: (my coll @ i).} set: 'cond' value: cond, set: 'coll' value: coll) " {:i ^(i + 1).} " 0. #"
    #var x is ({^my func next.} set: 'func' value: func).
    #^iterate " (func skipWhile: (preturn < not < pure)) " x " False. #"
    ^coll filter: {:i:v ^cond applyTo: v.}.
  }.
  var arithmetics is (Array new < 'add' ; 'sub' ; 'mul' ; 'div' ; 'pow' ; 'pure').
  var sequencials is (Array new < 'preturn' ; 'filter' ; 'Iterable' ; 'iterate' ; 'not' ; 'lt' ; 'gte' ; 'gt' ; 'lte'). #'foldl' ; 'foldr'
  ImportLib export: Record as: 'Record' namespace: 'Extensions:Functional'.
  ImportLib export: Iterable as: 'Iterable' namespace: 'Extensions:Functional'.
  ImportLib export: iterate as: 'iterate' namespace: 'Extensions:Functional' requires: (Array new < 'Extensions:Functional:Iterable').
  (arithmetics + sequencials) each: {:i :name
    ImportLib export: (Reflect getObject: name) as: name namespace: 'Extensions:Functional'.
  }.
  ImportLib export: arithmetics as: 'arithmetic' namespace: 'Extensions:Functional' requires: (arithmetics fmap: (add " 'Extensions:Functional:')).#"
  ImportLib export: sequencials as: 'sequencial' namespace: 'Extensions:Functional' requires: (sequencials fmap: (add " 'Extensions:Functional:')).#"
  #ImportLib export: PatternMatch as: 'PatternMatch' namespace: 'Extensions:Functional' requires: (Array new < 'Extensions:Functional:PatternMatchLock').
  #ImportLib export: PatternMatchLock as: 'PatternMatchLock' namespace: 'Extensions:Functional'.
}.
