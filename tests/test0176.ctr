#String operations should not leak memory

usedMemory1 := 0.
usedMemory2 := 0.
usedMemory3 := 0.
usedMemory4 := 0.

Broom mode: 0.

txt := 'Word Salad'.
Pen write: 'Text Length: ' + txt length, brk.
Pen write: 'Text Length in bytes: ' + txt bytes, brk.
Pen write: 'Character at 2:' + ( txt @ 2 ), brk.
Pen write: 'Byte at 2:' + ( txt byteAt: 2 ), brk.
Pen write: ( txt indexOf: 'S' ), brk.

Broom sweep.

usedMemory1 := Broom keptAlloc.
#Pen write: usedMemory1, brk.

txt := 'Word Salad'.
Pen write: 'Text Length: ' + txt length, brk.
Pen write: 'Text Length in bytes: ' + txt bytes, brk.
Pen write: 'Character at 2:' + ( txt @ 2 ), brk.
Pen write: 'Byte at 2:' + ( txt byteAt: 2 ), brk.
Pen write: ( txt indexOf: 'S' ), brk.

Broom sweep.
usedMemory2 := Broom keptAlloc.
#Pen write: usedMemory2, brk.

txt := 'Word Salad'.
Pen write: 'Text Length: ' + txt length, brk.
Pen write: 'Text Length in bytes: ' + txt bytes, brk.
Pen write: 'Character at 2:' + ( txt @ 2 ), brk.
Pen write: 'Byte at 2:' + ( txt byteAt: 2 ), brk.
Pen write: ( txt indexOf: 'S' ), brk.

Broom sweep.
usedMemory3 := Broom keptAlloc.
#Pen write: usedMemory3, brk.

#memory counters need to be equal!
( usedMemory1 = usedMemory2 and: usedMemory1 = usedMemory3, and: usedMemory2 = usedMemory3 ) ifTrue: {
	Pen write: 'No memory leaks here'.
}, ifFalse: {
	Pen write: 'Leaking memory...'.
}.
