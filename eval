#!/usr/bin/env ctr
#
Broom autoAlloc: True.
Reflect ignoreInTrace: (Program argument: 1). #eval or whatever it is
contextPurity is False. #This is not a pure context, since objects are mutated in-between evaluations. so disallowing purely functional things.
#Pen write: 'Extensions: ' + (File extensionsPath), brk.
File new: (File extensionsPath) + '/extensions/fileutils.ctr', include.

var PIDFILE is '~/.ctrpid.pid'.
var logo is ?>  _____ _ _
 / ____(_) |
| |     _| |_ _ __ ___  _ __
| |    | | __| '__/ _ \| '_ \  %s
| |____| | |_| | | (_) | | | |
 \_____|_|\__|_|  \___/|_| |_|

%s %s<?.

var display_logo is True.

var GREEN_COLOR is 'green' toSymbol.
var ITALIC_EFFECT is 'italic' toSymbol.
var inp is ''.
var _ is Nil.
var __ is Nil.
var it is Nil.
var stderr is File special: 'stderr'.
var inBlock is 0.
var enterRepeat is False.
var TerminalWidth is 85.

ImportLib LRArray.
import
  Library/Foreign/C/NamedStruct
  Library/Data/Map
  Library/Data/Set
  Library/Utils/Highlight
  Library/Control/MethodResolve
  Library/Data/Json
  Library/Utils/CLIContextMenu: ['generate_context_menu', 'clear_next_line']
  Library/Data/IO/Pen: 'pPen'.

var OneGateFlipper is Object new on: 'new' do: { ^me cnew: {my value is False.}. }.
OneGateFlipper on: 'set' do: { my value is True. }.
OneGateFlipper on: 'get' do: { var v is my value. my value is False. ^v. }.
Pen is pPen for: (File special: 'stdout').
var errPen is Pen for: stderr.
var linesp is 1.

Eval is Object new.
Eval on: 'init' do: {
  my end is False.
  my color is 'resetColor'.
  my prompt is '⠕ '.
  my args is Array new.
  my allowedColors is ('red blue magenta cyan yellow green resetColor' split: ' ') join: '|'.
  my globalvars is False.
  my history is LRArray new init: 100.
  (var hddir is File new: '~/.citron') exists ifFalse: { hddir mkdir. }.
  my hs_file is File new: '~/.citron/ctrhist'.
  my hs_file exists ifFalse: { my hs_file write: '[]'. }.
  var history is my history.
  (Json parse: (my hs_file read or: '[]') genericType: Object) each_v: \:x history push: x.
  my commands is Nil.
  my command_comps is Nil.
  my userDefs is Nil.
  my continuation is '⠒⠂'.
  my flags is Map new
    put: False at: 'ptype',
    put: False at: 'stats',
    put: True at: 'printvs',
    put: True at: 'highlight',
    put: False at: 'equit',
    put: False at: 'jsonout'.
  me genReader: 'eServer'.
  my errd is False.
  my last_error is Nil.
  my inNewBlock is False.
  my breakpoints is Map new.
  my debug is False.
  my stepDebug is False.
  my returnValue is Array new.
  my evaluationContext is Map new
    on: 'toString' do: {^'[GlobalEvalContext]'.}.
  my displayObject is Pen. #override from commandline, maybe?
  ^me.
}.
Eval on: 'display' do: {
  ^my displayObject.
}.
Eval on: 'display:' do: {:x
  my displayObject is x.
}.
['clear', 'green', 'cyan', 'magenta',
 'purple', 'blue', 'yellow', 'resetColor',
 'red', 'brk', 'clearLine', 'write:',
 'writeln:']
 each_v: {:v
   Eval on: 'display/$$v' do: {:*args
     ^my displayObject message: const v arguments: args.
   }.
}.
Eval on: 'handleException:' do: {:self:e
  my errd is True.
  my last_error is e.
  ^me getFlag: 'equit', either: {thisBlock error: e.} or: {self display/red write: e, resetColor brk. ^e.}.
}.
Eval on: 'handleInternalException:' do: {:e
  (var bugtrack is File new: '~/.citron/citron_eval_bug_track') exists ifFalse: {
    File mkdir: bugtrack path.
  }.
  var oldp is Program changeDirectory: bugtrack realPath.
  File new: 'citron_eval_bug_track_%s' % [Clock new time], write: '%s\nTime %s\n===========================\n%s' % [e, Clock new, (Reflect lastTrace tail tail tail chunks: 2, fmap: (\:x x join: ' at '), join: '\n')].
  errPen writeln: 'Eval bug, $$e'.
  Program changeDirectory: oldp.
}.
Eval on: 'errored?' do: {^my errd.}.
Eval on: 'lastError' do: {^my last_error.}.
Eval on: 'trace' do: {^Reflect lastTrace.}.
Eval on: 'end' do: {
  my end is True.
  my debug ifFalse: {
    me stopEvalServer.
    my hs_file write: (
      {:json Json parse: json. ^json.} catch: {:e ^'[]'.}, applyTo: (Json serialize: my history, ~ ?>s/\\/\\\\/g<?)
    ).
  }.
}.
Eval on: 'break' do: { my end ifTrue: {Broom sweep.}. ^my end. }.
Eval on: 'allowedColors' do: { ^my allowedColors. }.
Eval on: 'isAllowedColor:' do: { :c
  ^(c containsPattern: my allowedColors).
}.
Eval on: 'setColor:' do: { :c
  (me isAllowedColor: c) ifFalse: { thisBlock error: 'value $$c' + ' is not an allowed color.'. }.
  my color is c.
}.
Eval on: 'setPrompt:' do: { :p my prompt is p. }.
Eval on: 'setContinuation:' do: { :p my continuation is p. }.
Eval on: 'setArgs:' do: { :a my args := a. }.
Eval on: 'args' do: { ^my args. }.
Eval on: 'color' do: { ^my color. }.
Eval on: 'prompt' do: { ^(me preprompt) + my prompt + (me proprompt). }.
Eval on: 'preprompt' do: {
  var pp is Array new.
  me getFlag: 'highlight', ifFalse: { pp push: 'p'. }.
  pp is pp join: ':'.
  ^pp length > 0 either: pp + ' ' or: pp.
}.
Eval on: 'proprompt' do: {
  ^me inNewBlock either: ' ' * 2 * inBlock or: ''.
}.
Eval on: 'inNewBlock' do: {^my inNewBlock.}.
Eval on: 'newBlock' do: { my inNewBlock is True. }.
Eval on: 'endBlock' do: { my inNewBlock is False. }.
Eval on: 'continuation' do: { ^my continuation. }.
Eval on: 'evalContext' do: { ^my evaluationContext. }.
Eval on: 'shiftArgs' do: { ^my args shift. }.
Eval on: 'enableFlag:' do: {:flag my flags put: True at: flag. }.
Eval on: 'disableFlag:' do: {:flag my flags put: False at: flag. }.
Eval on: 'getFlag:' do: {:flag ^my flags at: flag. }.
Eval on: 'toggleFlag:' do: {:flag my flags put: (my flags @ flag) not at: flag. }.
Eval on: 'flags' do: {^my flags. }.
Eval on: 'modifyFlags:' do: {:flag
  flag startsWith: 'no-', ifTrue: {
    me disableFlag: (flag skip: 3).
  }, else: {
    me enableFlag: flag.
  }.
}.
Eval on: 'argCount' do: { ^(my args count). }.
Eval on: 'onlyRelevantArgs' do: { my args do shift shift done. }. #get rid of ./ctr eval

Eval on: 'startEvalServer' do: {
  var port is 5000 + (Dice rollWithSides: 1000).

  var EvalServer is Eval new init.

  my eServer is Program new: {:p
      Program is p.
      File new: PIDFILE, write: Program pid.
      p port: port.
      p serve: EvalServer.
  }.

  ^port.
}.

Eval on: 'startEvalServerOnPort:' do: {:port

  var EvalServer is Eval new init.

  my eServer is Program new: {:p
      Program is p.
      File new: PIDFILE, write: Program pid.
      p port: port.
      p serve: EvalServer.
  }.

  ^port.
}.

Eval on: 'stopEvalServer' do: {
  ^my eServer isNil not either: {my eServer signal: 1. ^True.} or: {^False.}.
}.

Eval on: 'addUserDef:definition:' do: {:name:def
  me userDefs put: def at: name.
}.

Eval on: 'userDefs' do: {
  ^my userDefs is my userDefs or: {
    ^Map new.
  }.
}.

Eval on: 'returnValue:' do: {:x my returnValue do pop push: x, done. }.
Eval on: 'stepDebug:' do: {:x my stepDebug is x. }.
Eval on: 'debug' do: { ^my debug. }.

Eval on: 'Commands' do: {
  my commands is my commands or: {
    var c is Map new
      put: {:args Eval end. ^''.} at: 'q',
      put: {:args Eval modifyFlags: args. ^''.} at: '!f',
      put: {:args Eval modifyFlags: args ~ ?>s/^-/no-/g<? ~ ?>s/^\+//g<?. ^''.} at: 'set',
      put: {:args ^Reflect strTypeOf: (Eval evaluate: args).} at: 't',
      put: {:args ^(args trim = '') either: {^Eval startEvalServer.} or: {^Eval startEvalServerOnPort: (Eval evaluate: args).}.} at: 'server',
      put: {:args ^'Interpreter metacommands help:
      + q -- Quit
      + t <expression> -- type of expression
      + server [<port>] -- make an eval server on port <port>, or a random port.
      + !server -- kill the eval server
      + !m <expression> -- evaluates and shows the methods of expression.
      + !p <expression> -- evaluates and shows the properties of expression.
      + !f <[no-]flag> -- modifies flag
      + set <(+|-)flag> -- alternative for !f with easier(?) syntax
      + !def <name> <expression> -- create a metacommand
      + p <expression> -- prints the value of expression
      + c -- clear screen and history
      + break <obj> <msg> -- break on object\'s message
      + !enable <b[reak]> -- enable option
      + h -- show this help
      - ! <cmd> -- execute shell command
      - %{ stmt* %} -- block expression (\'%{\' and \'%}\' will not be echoed)'
      + '\nDebug Mode commands (Currently Experimental):
      + !return <value> -- return value for this message
      + !step -- single step through messages
      + !cont -- continue
      + !frame [show, all, <id>] -- show frames'
      + '\nUser-defined commands:
      ' + (Eval userDefs fmap: \:k:v '+ %s -- %s' % [k, v], values join: '\n', or: '-None-').} at: 'h',
      put: {^Eval stopEvalServer.} at: '!server',
      put: {:args ^Reflect getPropertiesOf: (Eval evaluate: args).} at: '!p',
      put: {:args Eval display/writeln: (Eval evaluate: args). ^''.} at: 'p',
      put: {:args Eval display/clear. (var h is Eval getHistory) count times: { h pop. }. ^''.} at: 'c',
      put: {:args ^Reflect getMethodsOf: (Eval evaluate: args).} at: '!m',
      put: {:args
        var msgs is args reSplit: '\\s+'.
        var obj is Eval evaluate: msgs head.
        msgs tail each_v: \:msg Eval breakFor: obj message: msg.
        ^'will break on messages %L' % [msgs].
      } at: 'break',
      put: {:args
        args startsWith: 'b', either: {
          Eval instrument.
        } or: {
          thisBlock error: 'Invalid option $$args'.
        }.
        ^''.
      } at: '!enable',
      put: {:args
        Eval debug ifTrue: {
          Eval returnValue: (Eval evaluate: args).
          Eval end.
        }.
        ^''.
      } at: '!return',
      put: {
        Eval debug ifTrue: {
          Eval stepDebug: False.
          Eval end.
        }.
        ^''.
      } at: '!continue',
      put: {
        Eval debug ifTrue: {
          Eval stepDebug: True.
          Eval end.
        }.
        ^''.
      } at: '!step',
      put: {:args
        var name is args reSplit: '\\s+'.
        ^Reflect run: {:name
          name count = 0 ifTrue: {
            ^Reflect frame: (Reflect frameId - 2).
          }.
          name is name head.
          ^(name case: 'show' do: {
              var s is Reflect frame: (Reflect frameId - 2), kvlist: \:kv [kv head, (Reflect strTypeOf: kv last), kv last], fmap: \:x '%s (%s) = %s' % x, join: ', '.
              ^'frame %d { %s }' % [Reflect frameId - 2, s].
          }, case: 'all' do: {
            var x is Array new.
            Reflect frameId - 1 times: ({:i
              x push: (Reflect frame: i + 1).
            } catch: {}).
            ^x imap: (\:i:f 'frame %d { %s }' % [i + 1, (f kvlist: \:kv [kv head, (Reflect strTypeOf: kv last), kv last], fmap: \:x '%s (%s) = %s' % x, join: ', ')]), join: '\n'.
          }, default: {
            ^Reflect frame: (name toNumber), kvlist: \:kv [kv head, (Reflect strTypeOf: kv last), kv last], fmap: \:x '%s (%s) = %s' % x, join: ', '.
          }, switch).
        } inContextAsWorld: Eval evalContext arguments: [name].
      } at: '!frame',
      put: {:args
        [name, fn] is args split: ' ' max: 1.
        Eval addUserDef: name definition: fn.
        Eval addMetaCommand: name function: (Eval evaluate: fn).
        ^'+def %s %s' % [name, fn].
      } at: '!def'.
    c on: 'get:' do: {:self:cmd
      ^me at: cmd, or: {
        ^(cmd containsPattern: '^\\W$')
         either: Nil
         or: {
          var candidates is self keys filter: \:_:c c startsWith: cmd.
          ^candidates count
            case: 0 do: { ^Nil. },
            case: 1 do: { ^self at: candidates head. },
            default: {
              var candidates2 is candidates filter: \:_:x (x = cmd).
              ^candidates2 count
                case: 1 do: { ^self at: candidates2 head. },
                default: { ^\:args 'Ambiguous command %s, which one of (%L) did you mean?' % [cmd, candidates]. },
                switch.
            },
            switch.
          }.
        }.
    }.
    ^c.
  }.
  ^my commands.
}.
Eval on: 'CommandCompletions' do: {
  ^my command_comps is my command_comps or: {
    ^Map new
      put: {:argstr var flags is Eval flags keys.
        ^argstr count either: {
          var flag is argstr head trim.
          flag startsWith: 'no-', either: { flag is flag skip: 3. } or: { }.
          ^flags filter: \:i:v v startsWith: flag, fmap: \:x x skip: flag length.
        } or: flags.
      } at: ':!f',
      put: {:argstr
          ^argstr count either: {
              var path is argstr head split: ' ', last ~ ?>s|.*?((/*\w+)(/\w+)+/?).*|$1|<?.
              var path2 is path contains: '*', either: path or: path + '*'.
              ^(File expand: path2, fmap: (\:x x skip: path length)).
          } or: [].
      } at: ':!',
      put: {:filter
        filter is filter or: [''], last.
        ^(['all', 'show'] + (Array new fill: Reflect frameId with: \:i i toString)) filter: (\:_:x x startsWith: filter), fmap: \:x x skip: filter length.
      } at: ':!frame',
      put: {:filter ^Eval Commands keys filter: (\:_:x x startsWith: filter), fmap: \:x x skip: filter length.} at: 'generic'.
  }.
}.
Eval on: 'addMetaCommand:function:' do: {:name:fn
  Eval Commands put: fn at: name.
}.
Eval on: 'doMeta:' do: {:str:ptr
  var cmd is 'h'.
  var args is ''.
  str trim findPattern: '(\\W?\\w+|\\W)(\\s+(.*))?' do: {:parts cmd is parts @ 1. args is parts count > 2 either: {^parts @ 3.} or: ''.}.
  var cmds is Eval Commands.
  ^cmds get: cmd, or: {
    ^cmd = '!'
      either: { ^(\:x Shell call: x). }
      or: {
        ^{^'Invalid meta-command \':%s\'.\n' % [cmd] + (cmds at: 'h', run).}.
      }.
  }, applyTo: args.
}.

Eval on: 'metaCompletion:' do: {:m
  var meta is m head.
  var argstrs is m tail.
  var cmds is Eval CommandCompletions.
  ^cmds at: meta, or: {
      argstrs is meta skip: 1.
      ^cmds at: 'generic'.
  }, applyTo: argstrs.
}.

Eval on: 'evaluate:' do: { :str
  my errd is False.
  var eval_result_x is Nil.
  var evalContext is my evaluationContext.
  var f is (str at: 0, = ':')
    either:
      ({ ^eval_result_x is Eval doMeta: (str skip: 1). } catch: {:e Eval handleException: e.})
    or:
      ({
          ^(str startsWith: 'import') not
            either: ({
                ^Reflect run: {:str ^str eval.} inContextAsWorld: evalContext arguments: [str].
                } catch: {:e Eval handleException: e. ^Nil.}
            ) or: ({
                ^str eval.
                } catch: {:e Eval handleException: e. ^Nil.}).
        }).
    ^(Eval getFlag: 'jsonout') either: { ^Json serialize: [(f toString replace: '\\' with: '\\\\'), (Json serialize: [(Eval errored?), (Eval lastError), (Eval trace)])]. } or: {^f.}.
}.

Eval on: 'addFile:named:' do: {:str:fname
  var varname is fname split: '.' max: 1, head.
  Reflect run: {:fname:ctx:str ('var %s is {
    Eval statsb: 0, statsa: 0, exectime: 0.
    Reflect run: {:str str eval.} inContext: const ctx arguments: [const str].
  }' % [fname]) eval. } inContextAsWorld: my evaluationContext arguments: [varname, my evaluationContext, str].
}.
Eval on: 'pushHist:' do: {:h
  my history push: h.
}.
Eval on: 'executeLast:' do: {:n
  ^me evaluate: (my history @ n).
}.
Eval on: 'getHistory' do: {^my history.}.

Eval on: 'queryState:' do: {:query
    ^(((query countOf: '\'') - (query countOf: '\\\'')) even) & ((query countOf: '{') = (query countOf: '}')) & ((query countOf: '[') = (query countOf: ']')).
}.

Eval init.
Eval setArgs: (Array new fill: Program argCount with: {:i ^Program argument: i.}).
Eval onlyRelevantArgs.

#arguments that were not consumed
var args is Array new.

#global vars for evaluator
var it is Nil.
var _  is Nil.
var __ is Nil.

Eval on: 'tryNumrify:' do: {:s
  var r is s.
  {r is s toNumber.} catch: {r is s.}, run.
  ^r.
}.


Eval on: 'flatten:' do: {:list
  var lst is Array new.
  list each_v: {:l
    (Reflect isObject: l linkedTo: Array) either: {
      lst is lst + (Eval flatten: l).
    } or: {
      lst push: l.
    }.
  }.
  ^lst.
}.

Eval on: 'instrument' do: {
  Reflect globalInstrument: me tryDebug.
  Reflect enableInstrumentation.
}.

Eval on: 'breakFor:message:' do: {:o:m
  my breakpoints put: True at: (o &responder: m).
}.

Eval on: 'hasBreakPoint:message:' do: {:object:message
  ^my breakpoints at: (object &responder: message), or: my stepDebug.
}.
Eval on: 'tryDebug' do: {:self
  var ctx is my evaluationContext.
  ^{:object:message:args
    var this is me.
    var eval is const self.
    (Reflect isInFrame: const ctx) ifFalse: {^this.}.
    var bp is eval hasBreakPoint: object message: message.
    ^bp either: {
        ^eval debugRepl: [this, object, message, args].
        } or: {
          ^this.
        }.
  }.
}.

Eval on: 'allTheNames' do: {
  ^(Eval Commands keys fmap: {:i ^':' + i.}) + ['var', 'my', 'is'] + (Eval flatten: my evaluationContext keys) + (Eval flatten: Reflect getContext).
}.

Eval on: 'allTheNames:' do: {:obj
  ^obj isNil not either: {^[(False), (Reflect getMethodsOf: obj)].} or: {^[(True), (Eval allTheNames)].}.
}.

Eval on: 'togglePasteMode' do: {
  me toggleFlag: 'highlight'.
}.

# parse arguments
{ ^(Eval argCount > 0). } whileTrue: {
    # get an option
    var opt is Eval shiftArgs.
    args push: opt.
    # when passed -h, show help, then exit.
    opt case: '-h' do: {
        args pop. #consume option.
        Eval display/green write: 'Citron Evaluator.\n', resetColor.
        var P is Eval display.
        P on: 'indent:write:' do: {:self:i:w self write: ('  ' * i), write: w. }.
        P indent: 1 write: 'Eval mode help:', brk.
        P cyan indent: 1 write: 'Eval namespace', resetColor brk.
        P magenta indent: 2 write: '[Eval] setPrompt: [String] ', resetColor write: '-- Sets the prompt.', brk.
        P magenta indent: 2 write: '[Eval] setColor: [String] ', resetColor write: '-- sets the color of the output.', brk.
        P magenta indent: 2 write: '[Eval] getHistory ', resetColor write: '-- returns the 100 last commands.', brk.
        P magenta indent: 2 write: '[Eval] executeLast: [Number] ', resetColor write: '-- evaluates the Nth element of the history list.', brk.
        P magenta indent: 2 write: '[Eval] startEvalServer ', resetColor write: '-- starts an eval server in the background. returns the port.', brk.
        P magenta indent: 2 write: '[Eval] startEvalServerOnPort: [Number] ', resetColor write: '-- same as startEvalServer, with the port specified.', brk.
        P magenta indent: 2 write: '[Eval] end ', resetColor write: '-- Ends the eval.', brk.
        P indent: 1 write: 'Evaluates expressions in a single context.', brk.
        P indent: 1 write: 'Since all expressions are in single lines, pragma oneLineExpressions is active,', brk.
        P indent: 1 write: 'Hence ending expressions with a dot (.) is not required.', brk.
        P indent: 1 write: 'All the args that were not consumed are in the variable `args`.', brk.
        P cyan indent: 1 write: 'Program arguments\n',
          resetColor indent: 2 write: '-p : set the prompt\n',
          indent: 2 write: '--pc : set the prompt continuation\n',
          indent: 2 write: '-c : set the result color\n',
          indent: 2 write: '-h : show this help\n',
          indent: 2 write: '-f : evaluate file. many can be passed. All the files get added as runnable blocks (fully-qualified path without extensions)\n',
          indent: 2 write: '-F<[no-]flag> : enables the passed flag\n',
          indent: 2 write: '--Fs : display all the available flags\n',
          indent: 2 write: '--meta <command> : execute a metacommand (sans the initial :)\n',
          indent: 2 write: '-e : evaluate expression and exit, all args after the expr will be passed to the code as var `args`\n',
          indent: 2 write: '-v : print version information and exit\n',
          indent: 2 write: '-s <port>: start a evaluation server on the specified port (Forked and the current process will be killed. pidfile at ~/.ctrpid.pid)\n',
          indent: 2 write: '-m <executable module> <modu_arg>* : Execute an executable module (at Library/Executable)\n',
          indent: 2 write: '--pid <pidfile>: set the pid file. value is ignored unless [-s <port>] comes after\n',
          indent: 2 write: '--no-logo : don\'t display the ascii logo, use normal text instead\n',
          indent: 2 write: '--interactive-print : Use this object instead of `Pen\' to print values\n',
          indent: 2 write: '--highlight-file <file|-> : highlight the file (or stdin) and quit\n',
          magenta indent: 1 write: 'Any other option will be consumed and dumped into the `args` array.', brk.
        P green write: 'default imported modules in eval are:',
          cyan indent: 1 write: ('LRArray ' + (import __loaded_modules keys reverse join: ' ') ~ 's/\\s|^/\\n+ /g').
        P resetColor brk.
        Program exit.
    # when passed -p, get the next arg, and set the prompt to that.
    }, case: '-p' do: {
        args pop. #consume option..
        var value is Eval shiftArgs.
        (value isNil) ifTrue: { thisBlock error: '-p requires an arg.'. }.
        Eval setPrompt: value.
    # when passed -pc, get the next arg, and set the continuation prompt to that.
    }, case: '--pc' do: {
        args pop. #consume option..
        var value is Eval shiftArgs.
        (value isNil) ifTrue: { thisBlock error: '--pc requires an arg.'. }.
        Eval setContinuation: value.
    # when passed -c, get the next arg, and set the result color to that.
    }, case: '-c' do: {
        args pop. #consume option.
        var value is Eval shiftArgs.
        (value isNil) ifTrue: { thisBlock error: '-c requires an arg, valid arguments are: \n\t' + (((Eval allowedColors) split: '|') join: '\n\t'). }.
        Eval setColor: value.
    }, case: '-f' do: {
        args pop. #consume option.
        var file is Eval shiftArgs.
        (file isNil) ifTrue: { thisBlock error: '-f requires a file name.'. }.
        Eval addFile: (File new: file, read) named: file.
    }, case: '--Fs' do: {
        args pop. #consume option.
        Eval display/writeln: (Eval flags keys join: '\n').
        Program exit.
    }, case: '--meta' do: {
        args pop.
        Eval doMeta: Eval shiftArgs.

    }, case: '-e' do: {
        args pop. #consume option..
        var value is Eval shiftArgs.
        (value isNil) ifTrue: { thisBlock error: '-e requires an argument.'. }.
        { ^(Eval argCount > 0). } whileTrue: { args push: Eval shiftArgs. }. #consume all other arguments.
        # if it ends in a dot, delete it.
        args imap: {:i:n Reflect addGlobalVariable: '&' + (i + 1). Reflect set: '&' + (i + 1) to: (Eval tryNumrify: n).}.
        Reflect addGlobalVariable: '&_'.
        &_ is args.
        value findPattern: '(.*)\\.' do: {:p value is p at: 1.}.
        Eval display/write: (Eval evaluate: value).
        Program exit.
    }, case: '-v' do: {
        Eval display/writeln: 'Citron Version ' + Reflect version.
        Eval display/writeln: 'Built with the extension prefix of ' + File extensionsPath.
        Eval display/writeln: 'Compiled with ' + Reflect compilerInfo.
        Program exit.
    }, case: '-V' do: {
        Eval display/writeln: 'Citron'.
        Eval display/writeln: '[%L]' % [(Reflect version split: '.')].
        Program exit.
    }, case: '--pid' do: {
      args pop.
      var f is Eval shiftArgs.
      (f isNil) ifTrue: { thisBlock error: '--pid requires an argument <pidfile>'. }.
      PIDFILE is f.
    }, case: '-s' do: {
      args pop.
      var f is Eval shiftArgs toNumber.
      (f <=: 0) ifTrue: { thisBlock error: 'Invalid port specified: $$f'. }.
      Eval enableFlag: 'jsonout'.
      Eval startEvalServerOnPort: f.
      Program exit.
    }, case: '-m' do: {
      args pop.
      var mod is Eval shiftArgs.
      (mod isNil) ifTrue: { thisBlock error: 'no module to run?'. }.
      var args is Eval args.
      import respondTo: 'Library/Executable/%s:' % [mod] and: ['Main'].
      { Main applyTo: args. } catch: {:e Eval display/red writeln: e, resetColor.}, run.
      Program exit.
    }, case: '--no-logo' do: {
      args pop.
      display_logo is False.
    }, case: '--interactive-print' do: {
      args pop.
      var obj is Eval shiftArgs.
      obj is Eval evaluate: obj, or: \:_ thisBlock error: '--interactive-print requires an argument'.
      Eval display: obj.
    }, case: '-F' do: {
      args pop.
      var opts is Eval shiftArgs or: '', reSplit: '(,|/)(\\s*)'.
      opts each: {:i:flag
        (flag = '') ifTrue: { errPen yellow writeln: '[Warn]: empty -F flag index#$$i was ignored', resetColor. }.
        Eval modifyFlags: flag.
      }.
    }, case: '--highlight-file' do: {
      var files is Eval shiftArgs or: '-', reSplit: '(\\s+)'.
      files each_v: \:f f = '-' either: {
          Pen writeln: (Highlight highlight: (Program input)).
      } or: \:_ Pen writeln: (Highlight highlight: (File new: f, read)).
      Program exit.
    }, default: {
      (opt startsWith: '-') & (opt startsWith: '--', not) ifTrue: {
        args pop.
        opt skip: 1, reverse characters each_v: \:c args push: '-' + c.
      }.
    }, switch. # do not consume any other option.
}.

import Library/Foreign/C/C_Types: ['c_int', 'c_ptr', 'c_short'].
import Library/Foreign/C/errno: 'g_strerror'.
import Library/Foreign/C/Signal: 'Signal'.

_ioctl is CTypes loadLibrary: Nil, ioctl.
_ioctl_ty is CIF new setABI: 0 return: c_int argTypes: [c_int, c_int, c_ptr].
wsize is NamedStruct new initAs: 'ssssssss' names: ['row', 'col', 'x_pixel', 'y_pixel'].
wsize struct allocate.

winsize is {:_
  var __eval_ret is _ioctl_ty call: _ioctl withArgs: [0, 0x5413, (wsize struct)].
  (__eval_ret !=: 0) ifTrue: { thisBlock error: g_strerror run. }.
  TerminalWidth is (wsize memberCol - 10) max: 10.
  ^[wsize memberRow, wsize memberCol, wsize memberXPixel, wsize memberYPixel].
}.

TerminalWidth is 85.
Eval display/writeln: 'Terminal: %sx%s - %sx%s' % winsize run.
Signal new handle: 'SIGWINCH' with: winsize.


display_logo
  either: {Eval display/writeln: (Colors % [logo, GREEN_COLOR, ITALIC_EFFECT] % ['Project Citron', Reflect version, Reflect compilerInfo]).}
  or: {
    Eval display/green write: ?>Project Citron : The Programming Language (V<?, write:(Reflect version) + ')', resetColor brk
    write:
    'Eval Mode, parameters related to eval are in the Eval namespace.\n' +
    'run with \'-h\' to read the eval mode help.\n'.
  }.

Eval on: 'redraw:at:comment:' do: {:inp:cursor:cmt
  cursor -=: inpbrk.
  inp is inp from: inpbrk to: inp length.
  var ctn is Eval prompt.
  ctn is inp length > ((var twext is TerminalWidth run - (ctn length))) either: (Eval continuation) or: ctn.
  twext -=: cursor.
  twext -=: cmt length.
  twext < 0 ifTrue: {
    cmt is ''.
  }, else: {
    cmt is '\x1b[%dC%s\x1b[%dD' % [twext, cmt, twext + cmt length].
  }.
  Eval display/clearLine.
  inp length > 1 ifTrue: {
    var diff is 0.
    var iinp is (cursor > (var first_visible is (inp length - TerminalWidth run - (ctn length) max: 0))) either: { ^inp skip: first_visible - 2. } or: { var tdiff is TerminalWidth run - (ctn length). var f is inp skip: cursor - 1. diff is f length - tdiff. ^f from: 0 length: tdiff. }.
    (Eval getFlag: 'highlight') ifTrue: {iinp is Highlight highlight: iinp.}.
    Eval display/cyan write: ctn, resetColor.
    Eval display/write: '%s%s' % [iinp, ('\b' * (inp length - cursor - diff - 1 max: 0, min: inp length))].
  }, else: {
    Eval display/cyan write: ctn, resetColor write: inp.
  }.
  (cmt length > 0) ifTrue: { Eval display/yellow write: cmt, resetColor. }.
}.

Eval genAccessors: ['exectime', '__eval_ret', 'statsb', 'statsa'].

Eval on: 'repl' do: {:self
  {^True.} whileTrue: { self read_eval_print: self prompt. }.
}.

Eval on: 'enableDebugStuff' do: {
  my debug is True.
}, on: 'disableDebugStuff' do: {
  my debug is False.
  my stepDebug is False.
  my end is False.
}.

Eval on: 'debugRepl:' do: {:self:stuff
  Pen writeln: 'Break on %s::\'%s\' (%L)' % stuff tail.
  var prompt is '%s %s(%s)%s' % (stuff tail + [self prompt]).
  var inp is ''.
  var _ is Nil.
  var __ is Nil.
  var it is Nil.
  var stderr is File special: 'stderr'.
  var errPen is Pen for: stderr.
  var enterRepeat is True.
  var inBlock is 0.
  enableDebugStuff.
  my returnValue push: stuff head.
  {^True.} whileTrue: { self read_eval_print: prompt. }.
  disableDebugStuff.
  ^my returnValue pop.
}.

Eval on: 'read_eval_print:' do: ({:prompt
  var hindex is me getHistory count.
  var ncmessage is ' <- No completion'.
  var stdin is File special: 'stdin'.
  inp is ''.
  # break the repl when `end` is True.
  Eval break break.
  Eval display/cyan write: prompt, resetColor.

  var inc is stdin readBytes: 1.
  var last_was_comp is False.
  var last_comp_entry is ''.
  var last_comp_index is -1.
  var last_comp_rewind is 0.
  var last_toc is 'Object'.
  var done is False.
  var cursor is 0.
  var multichar_in is Array new.
  inBlock is 0.
  Eval endBlock.
  var lastEscape is False.
  var inString is False.
  var inpbrk is 0.
  var last_comp_entry_len is 0.
  var ce_idx is 0.
  var cmt is ''.
  var comp_set is HashSet new.
  var have_context is False.
  {^done & (inBlock = 0).} whileFalse: {
    cmt is ''.
    inc = '\t' ifTrue: {#<Tab>
        clear_next_line applyTo: linesp. have_context is False.
        comp_set clear.
        inp containsPattern: ?>^\s*:<?, either: {
          last_was_comp ifTrue: {
            inp is inp removeFrom: (cursor - last_comp_entry_len) to: cursor.
            cursor is (cursor - last_comp_entry_len) max: 0.
            }.
          var comps is Eval metaCompletion: (inp split: ' ' max: 1).
          comps count > 0 either: {
            comps count <=: ce_idx, ifTrue: { ce_idx is 0. }.
            # Pen writeln: comps.
            last_comp_entry is comps @ ce_idx.
            ce_idx +=: 1.
            last_comp_entry_len is last_comp_entry length.
            inp +=: last_comp_entry.
            cursor +=: last_comp_entry_len.
            last_was_comp is True.
          } or: { cmt is '<- No completion'. }.
        } or: {
          var candidate is 'Nil'.
          var toc is (inp trim or: '  ') split: ' ', last.

          last_was_comp ifTrue: {
            var toremove is ((toc length) - (last_comp_entry length)).
            Pen write: '\b \b' * toremove.
            inp is inp removeFrom: (cursor - toremove) to: cursor.
            cursor is (cursor - toremove) max: 0.
          }.
          toc is last_was_comp either: last_comp_entry or: toc.
          last_comp_entry is toc.
          var flipper is OneGateFlipper new.
          last_toc is (inp trim or: 'Nil') split: ' ', filter: {:_:v (v endsWith: ':') ifTrue: {flipper set. ^False.}. ^((v endsWith: ':') | (flipper get)) not | (v containsPattern: ?>(-?(0[xXcC])?[\d]+(\.[\d]+)?)|($\')<?). }.
          last_toc is (last_toc count) >=: 2, either: {^last_toc init last.} or: 'Nil'.
          last_toc containsPattern: ?>(-?(0[xXcC])?[\d]+(\.[\d]+)?)<?, ifTrue: { last_toc is 'Number'. }.
          last_toc containsPattern: ?>^\'<?, ifTrue: { last_toc is 'String'. }.
          var candidates is Eval allTheNames: ({^Reflect getObject: (['my', 'var'] contains: last_toc, either: Nil or: last_toc).} catch: {^Nil.}, run).
          var skipthis is candidates @ 0.
          candidates is (candidates @ 1) filter: {:_:i ^i startsWith: toc.}.
          candidates count !=: 0, ifTrue: {
            have_context is True.
            candidate is candidates @ (last_comp_index is (last_comp_index +=: 1) >=: (candidates count), either: 0 or: last_comp_index).
            var uniq is comp_set addAll: candidates, toArray.
            var uid is uniq indexOf: candidate.
            linesp is generate_context_menu applyTo: uniq and: uid.
            var cc is candidate skip: toc length.
            cmt is (var iis is '[from %s]' % [last_toc]).
            last_comp_rewind is iis length.
            inp is inp insert: cc at: cursor.
            cursor +=: cc length.
          }, else: {
            cmt is ncmessage.
          }.
          last_was_comp is True.
          skipthis ifTrue: {last_toc is candidate.}.
        }.
      }, else: {
        inc case: '\xd' do: {#<Enter>
          clear_next_line applyTo: linesp.
          have_context ifFalse: {
          inp length > 0 ifTrue: {
            (inp containsPattern: ?>^\s*:<?) ifTrue: {done is True.}, else: {
              (inp containsPattern: ?>\.\s*$<?, not) & (inBlock = 0) ifTrue: {
                inp +=: '.'.
              }.
              done is inBlock = 0.
            }.
            inBlock !=: 0, ifTrue: { Eval newBlock. Pen brk. inp +=: ' '. inpbrk is inp length. cursor +=: 1.}.
          }, else: { Pen brk. done is True. }.
          }.
          have_context is False.
        }, case: '\x3' do: {#<^C>
          clear_next_line applyTo: linesp. have_context is False.
          inp is ''.
          cursor is 0.
          inBlock is 0.
          cmt is '<Broke block>'.
          # Pen red writeln: 'Interrupted', resetColor.
          # done is True.
        }, case: '\x4' do: {#^D
          Program exit.
        }, case: '\b' do: {#<\b>
          clear_next_line applyTo: linesp. have_context is False.
          cursor > 0 ifTrue: {
            inp is inp removeFrom: (cursor - 1) to: cursor.
            cursor -=: 1.
            Eval display/write: '\b \b'.
          }, else: { Eval display/write: '\a'. }.
        }, case: '\x{7f}' do: {#<\b>
          clear_next_line applyTo: linesp. have_context is False.
          cursor > 0 ifTrue: {
            inp is inp removeFrom: (cursor - 1) to: cursor.
            cursor -=: 1.
            Eval display/write: '\b \b'.
          }, else: { Eval display/write: '\a'. }.
        }, case: '\x11' do: {
          var toc is (inp trim or: '  ') split: ' ', last.
          var recs is '%:L' % [' ', (Eval allTheNames filter: {:_:n ^n startsWith: toc.})].
          Eval display/cyan write: recs, resetColor.
          clear_next_line applyTo: linesp. have_context is False.

        }, case: '\x1b' do: {
          inc is stdin readBytes: 2.
          inc case: '\x5b\x41' do: { #Up Arrow
            hindex > 0 ifTrue: {
              cursor is (inp is Eval getHistory at: (hindex is hindex - 1)) length.
            }.
            clear_next_line applyTo: linesp. have_context is False.

          }, case: '\x5b\x42' do: { #Down Arrow
            (hindex > 0) & (Eval getHistory count > 0) ifTrue: {
              hindex +=: 1.
              Eval display/write: '\b' * (inp length).
              inp is Eval getHistory.
              inp count <=: hindex, ifTrue: {hindex is inp count.}.
              inp is inp at: hindex - 1.
              cursor is inp length.
            }, else: {
              hindex is 0.
              Eval display/write: '\b \b' * (inp length).
              inp is ''.
              cursor is 0.
            }.
            clear_next_line applyTo: linesp. have_context is False.

          }, case: '\x5b\x43' do: { #Right Arrow
            (cursor < inp length) ifTrue: {
              cursor +=: 1.
            }, else: {Eval display/write: '\a'.}.
            clear_next_line applyTo: linesp. have_context is False.

          }, case: '\x5b\x44' do: { #Left Arrow
            (cursor > 0) ifTrue: {
              cursor -=: 1.
            }, else: {Eval display/write: '\a'.}.
            clear_next_line applyTo: linesp. have_context is False.

          }, case: '\x5b\x31' do: { #Supposedly <ctrl>
            inc is stdin readBytes: 3.
              (inc = '\x3b\x35\x44') & (cursor > 0) ifTrue: { #^Left Arrow
                var ct is inp from: 0 to: cursor.
                var ct is ct trim.
                ct is (ct reLastIndexOf: ?>\s|\'<?).
                ct is ct equals: cursor - 1, either: ct - 1 or: ct.
                cursor is ct + 1.
              }, else: {
                (inc = '\x3b\x35\x43') ifTrue: { #^Right Arrow
                  var ct is (var ix is inp from: cursor to: (inp length), trim) reIndexOf: ?>\s|\'<?, - 1.
                  ct is ct equals: 0, either: ct + 1 or: ct.
                  cursor is cursor + ct + ((inp length) - (ix length)).
                }.#, else: { Eval display/red write: inc. }.
              }.
              clear_next_line applyTo: linesp. have_context is False.
          }, case: '\x4f\x51' do: { #F2
              clear_next_line applyTo: linesp. have_context is False.
              Eval togglePasteMode.
          }, default: {
            Pen write: inc toByteArray.
          }, switch.
        }, default: {
          have_context ifTrue: { clear_next_line applyTo: linesp. have_context is False. }.
          (inc
            case: '\'' do: {
                inString is (inString & lastEscape not) | (inString not).
            },
            case: '\\' do: {
                lastEscape is True.
            },
            case: '%' do: {
              (var cdi is stdin readBytes: 1).
                cdi
                  case: '{' do: {
                    inc is inc from: 0 to: inc length - 1.
                    inBlock +=: (inString either: 0 or: 1).
                  },
                  case: '}' do: {
                    inc is inc from: 0 to: inc length - 1.
                    inBlock -=: (inString either: 0 or: 1).
                  }, default: {
                    inc +=: cdi.
                  }, switch.
            },
            case: '#' do: {
              inString ifFalse: {
                cmt is Colors % ['comments are not allowed in eval', \red].
                done is True.
                inc is ''.
              }.
            }, switch).
          inp is inp insert: inc at: cursor.
          cursor +=: inc length.
          # Eval redraw: inp at: cursor comment: ''.
        }, switch.
        last_was_comp is False.
      }.
    Eval redraw: inp at: cursor - 1 comment: (inBlock either: '%s%d' % ['%{', inBlock] or: cmt).
    # Eval display/write: inc toByteArray.
    done is (done & (inBlock = 0)).
    done break.
    inc is stdin readBytes: 1.
  }.
  hindex is Eval getHistory count.
  # Eval display/cyan write: ' [cursor %d in (%s)]' % [cursor, (inp)], resetColor.
  (inp trim = '') do ifTrue: {
    enterRepeat ifTrue: {
      inp is Eval getHistory or: ['Nil'], head.
    }.
  }, continue done.
  Eval getFlag: 'printvs', ifTrue: { Eval display/brk. }.
  # if it ends in a dot, get rid of it.
  inp is inp trim.
  (inp at: (inp length - 1), = '.') ifTrue: {
    inp is inp from: 0 length: (inp length - 1).
  }.
  Eval statsb: 0, statsa: 0, exectime: 0.
  Eval getFlag: 'stats', either: {
    Eval statsb: Broom keptAlloc.
    Eval exectime: (Clock timeExecutionOf: { Eval __eval_ret: (Eval evaluate: inp). }).
    Eval statsa: Broom keptAlloc.
  }
  or: {
    Eval __eval_ret: (Eval evaluate: inp).
  }.
  Eval pushHist: inp.
  __ is _.
  _ is Eval __eval_ret.
  Eval errored? not ifTrue: {
    var printed is False.
    Eval getFlag: 'printvs', ifTrue: { Pen message: Eval color arguments: [], write: var str is Eval __eval_ret toString. printed is str length > 0. }.
    Eval display/resetColor.
    Eval getFlag: 'ptype', ifTrue: {
      Eval display/yellow write: '%s=> (%s)%s' % [(printed either: ' ' or: ''), (Reflect strTypeOf: Eval __eval_ret, replace: '\'' with: ''), (printed either: '' or: '\n')].
      Eval display/resetColor.
    }.
    Eval getFlag: 'stats', ifTrue: {
      var str is '%s(%s seconds (%d cycles), %s bytes)' % [(printed either: '\n' or: ''), Eval exectime / (Clock ticksPerSecond), Eval exectime, ((Eval statsa - Eval statsb) toString reverse reSplit: '(?<=\\G...)', join: ',', reverse)].
      Eval display/write: Colors % [str, GREEN_COLOR, ITALIC_EFFECT].
      printed ifFalse: { Eval display/brk. }.
    }.
    it is _.
    #Broom sweep. #Keep the darn pointers in memory
    Eval __eval_ret toString length > 0 ifTrue: { Eval display/brk. }.
  }.
}).# catch: {:e Eval handleInternalException: e.}).

Eval repl.
