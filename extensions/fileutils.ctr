Object on: 'exec:' do: { :t
  var self is thisBlock.
  ((t type) !=: (String type)) ifTrue: { self error: 'Can only exec strings.'. }.
  var tempFile is File tempFileLike: '/tmp/citronXXXXXX'.
  var p is tempFile path.
  tempFile write: t, runHere.
  tempFile close.
  tempFile delete.
}.

String on: 'execute' do: { :t
  me exec: me.
}.

Reflect addGlobalVariable: 'ImportLib'.
ImportLib on: 'init' do: {
  my imports is Map new.
  me loadExtensions.
}.
ImportLib on: 'loadExtensions' do: { :ename
  var exts is File list: (File extensionsPath) + '/extensions', filter: {:i:v ^(v is (v @ 'file') split: '.') count > 1 & (v @ -1 = 'ctr').}.
  exts each: { :k :f
    ((f @ 'type' !=: 'file') | (f @ 'file' = 'fileutils.ctr')) continue.
    var v is f @ 'file'.
    (v endsWith: '.ctr') ifTrue: {
      v is '/extensions/$$v'.
      File new: (File extensionsPath) + v, include.
    }.
  }.
}.
ImportLib on: 'export:as:namespace:requires:' do: { :thing :name :namespace :imports
  ((my imports @ namespace) isNil) ifTrue: ({my imports put: (Map new) at: namespace.} set: 'imports' value: my imports).
  var ns is my imports @ namespace.
  ns put: (Map new put: thing at: ':provides:', put: imports at: ':requires:') at: name.
  my imports put: ns at: namespace.
}.
ImportLib on: 'export:as:namespace:' do: { :thing :name :namespace
  me export: thing as: name namespace: namespace requires: (Array new).
}.
ImportLib init.
ImportLib on: 'importAll:' do: {:things
  things each: {:i :qname
    var name is (qname from: ((qname lastIndexOf: ':') + 1) to: (qname length)).
    ImportLib import: qname as: name.
  }.
}.
ImportLib on: 'importAll:as:' do: { :things :gnames
  var fourOhFour is Array new.
  things each: { :i :name
    var gname is gnames @ i.
    var aux is name.
    var namespace is my imports.
    ((var ind is name lastIndexOf: ':') !=: -1) ifTrue: ({
      var ns is name from: 0 length: (ind).
      aux is name from: (ind + 1) to: (name length).
      namespace is (my imports @ ns).
    } set: 'imports' value: my imports).
    var ImportLib is (namespace @ aux).
    (ImportLib isNil) ifTrue: { fourOhFour push: name. },
                   ifFalse: {
                    var imps is (ImportLib @ ':requires:').
                    (imps count !=: 0) ifTrue: {
                      ImportLib importAll: imps.
                    }.
                    Reflect addGlobalVariable: gname.
                    Reflect set: gname to: (ImportLib @ ':provides:').
                  }.
  }.
  (fourOhFour count = 0) ifFalse: {thisBlock error: 'Libraries not found: ' + fourOhFour. }.
}.
ImportLib on: 'import:as:' do: { :iname :gname
  me importAll: (Array < iname) as: (Array < gname).
}.
ImportLib on: 'from:import:as:' do: { :fname :iname :gname
  (File new: fname exists) ifFalse: {thisBlock error: 'No such file $$fname found.'.}.
  File new: fname, include.
  me import: iname as: gname.
}.
ImportLib on: 'from:import:' do: { :fname :iname :gname
  (File new: fname exists) ifFalse: {thisBlock error: 'No such file $$fname found.'.}.
  File new: fname, include.
  me import: iname as: iname.
}.
ImportLib on: 'noImport' do: {thisBlock error: 'No ImportLib.'.}.
ImportLib on: 'respondTo:' do: { :iname var nsname is 'Extensions:$$iname'. me importAll: (Array new < nsname) as: (Array new < iname). ^Reflect getObject: iname.}.
ImportLib on: 'respondTo:and:' do: { :nname :iname (iname split: ',') each: {:i :iname var nsname is 'Extensions:$$nname$$iname'. me importAll: (Array new < nsname) as: (Array new < iname).}. ^Reflect getObject: iname.}.
var importas is {:oname:iname ImportLib import: 'Extensions:$$oname' as: iname.}.
