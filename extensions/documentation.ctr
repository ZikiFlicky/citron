#Reflect addGlobalVariable: 'Documentation'.
var Documentation is Object new.
Documentation on: 'getFor:' do: { :obj
  var docs is Map new.
  (Reflect getMethodsOf: obj) each: { :k :v
    var reported is obj getDocumentationFor: v.
    reported is (reported isNil) either: 'Stub' or: reported.
    docs put: reported at: v.
    }.
  var _docs is me lookup: (obj type).
  docs mergeWith: _docs.
  var doc is ''.
  docs each: { :k :v :map
    (k @ 0 = '[') ifFalse: {doc append: (obj type) + ' '.}.
    doc append: '[$$k' + ']:\n\t$$v \n\n'.
  }.
  ^doc.
}.

Documentation on: 'type' do: {^'Documentation'.}.

Documentation on: 'lookup:' do: { :type
  var doc is Map new.
  ('Object' = type)        ifTrue: {

  }.
  ('Nil' = type)           ifTrue: {

  }.
  ('Boolean' = type)       ifTrue: {

  }.
  ('Number' = type)        ifTrue: {

  }.
  ('String' = type)        ifTrue: {

  }.
  ('CodeBlock' = type)     ifTrue: {

  }.
  ('Array' = type)         ifTrue: {

  }.
  ('Map' = type)           ifTrue: {
    doc put: 'Key-Value hash-table. ' at: '[Map]'.
    doc put: 'Constructs a new, empty association table, hash is provided by siphash.\n\tm is Map new.' at: 'new'.
    doc put: 'Associates the value with the key.\n\tm put: \'example\' at: \'document\'.' at: 'put:at:'.
    doc put: 'Gets the value associated with key.\n\tm at: \'document\'. #\'example\'' at: 'at:'.
    doc put: 'Alias for at:' at: '@'.
    doc put: 'runs a CodeBlock (Params: key, value, map) through the whole map.\nIn which \'me\' and \'my\' refer to the collection itself.' at: 'each:'.
    doc put: 'returns the count of hashes in the map.' at: 'count'.
    doc put: 'returns \'Map\' unless overridden.' at: 'type'.
    doc put: 'Alias for \'serialize\' unless overridden.' at: 'toString'.
    doc put: 'Serializes the map to the highest protocol.' at: 'serialize'.
    ^doc.
  }.
  ('Pen' = type)           ifTrue: {

  }.
  ('?' = type)             ifTrue: {

  }.
  ('File' = type)          ifTrue: {

  }.
  ('Program' = type)       ifTrue: {

  }.
  ('Clock' = type)         ifTrue: {

  }.
  ('Dice' = type)          ifTrue: {

  }.
  ('Slurp' = type)         ifTrue: {

  }.
  ('Shell' = type)         ifTrue: {

  }.
  ('Broom' = type)         ifTrue: {

  }.
  ('Documentation' = type) ifTrue: {

  }.
  ^doc.
}.
(Reflect objectExists: 'ImportLib') ifTrue: {
  ImportLib export: Documentation as: 'Documentation' namespace: 'Extensions'.
}.
