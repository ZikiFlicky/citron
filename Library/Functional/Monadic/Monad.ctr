import Library/Control/Error/NotImplementedError.

var identity is {\:x x}.
var pure is {:x
  ^Reflect objectExists: 'thisContext', either: {
    ^thisContext unit: x.
  } or: x.
}. #Ugly HACK to get contextual awareness

var Monad is Object new
  on: 'bind:' do: {
    thisBlock error: NotImplementedError $ 'Monad#bind:'.
  },
  on: 'unit:' do: {:value
    ^me cnew: {value => value.}.
  },
  on: 'lift:' do: {:func
    var self is me.
    ^me bind: \:x self unit: (func applyTo: x).
  },
  on: 'join' do: {
    ^me bind: const identity.
  },
  on: '>>=:' do: {:func
    ^me bind: func.
  },
  on: '>' do: {:next
    ^me bind: \:_ next.
  }.

import export: Monad as: 'Monad'.
import export: identity as: 'identity'.
import export: pure as: 'pure'.
