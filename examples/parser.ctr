var clock_i is Clock processorClock.

var printExecTime is {:job_name
  var clock_e is Clock processorClock.
  Pen red write: '$$job_name took ' + (clock_e - clock_i) + ' processor cycles or ' + (clock_e - clock_i / (Clock ticksPerSecond)) + ' seconds', resetColor brk.
  clock_i is Clock processorClock.
}.

Broom memoryLimit: 1024 * 1024 * 1024.
var Parser is Object new.
Parser on: 'of:' do: {:blk ^Parser cnew: {my parser is blk.}.}.
Parser on: 'tryMatch:' do: {:i
  ^my parser applyTo: i.
}.

Parser on: 'matchBeforeButReturn:' do: {:parser2
  var self is me.
  ^Parser of: ({:i var x is my self tryMatch: i. var y is my parser2 tryMatch: x leftOver. ^ParsedObject matched: ((x matched?) & (y matched?)) value: (y value) leftOver: y leftOver.} set: 'self' value: self, set: 'parser2' value: parser2).
}.
Parser on: 'matchAfterButReturn:' do: {:parser2
  var self is me.
  ^Parser of: ({:i var x is my self tryMatch: i. var y is my parser2 tryMatch: x leftOver. ^ParsedObject matched: ((x matched?) & (y matched?)) value: (x value) leftOver: y leftOver.} set: 'self' value: self, set: 'parser2' value: parser2).
}.
Parser on: 'matchSequence:' do: {:parser2
  var self is me.
  ^Parser of: ({:i var x is my self tryMatch: i. var y is my parser2 tryMatch: x leftOver. ^ParsedObject matched: ((x matched?) & (y matched?)) value: [(x value), (y value)] leftOver: y leftOver.} set: 'self' value: self, set: 'parser2' value: parser2).
}.

Parser on: 'maybe' do: {
  ^Parser of: ({:i
    var result is my self tryMatch: i.
    ^ParsedObject matched: True value: (result value) leftOver: (result leftOver).
  } set: 'self' value: me).
}.
Parser on: 'or:' do: {:parser2
  var self is me.
  ^Parser of: ({:i var x is my self tryMatch: i. var y is my parser2 tryMatch: i. ^ParsedObject matched: (var result is (x matched?) | (y matched?)) value: (x matched? either: (x value) or: (y value)) leftOver: (x matched? either: (x leftOver) or: (y leftOver)).} set: 'self' value: self, set: 'parser2' value: parser2).
}.
Parser on: 'plus' do: {
  ^Parser of: ({:i
    var result is Array < (my self tryMatch: i).
    {^(result @ -1) matched?.} whileTrue: {
      result push: (my self tryMatch: ((result @ -1) leftOver)).
    }.
    result is result from: 0 length: (result count - 1).
    (result count > 0) ifTrue: {
      result is ParsedObject matched: ((result @ -1) matched?) value: (result fmap: {:v ^v value.}) leftOver: ((result @ -1) leftOver).
    }, else: {
      result is ParsedObject matched: False value: Nil leftOver: (i leftOver).
    }.
    ^result.
  } set: 'self' value: me).
}.
Parser on: 'times:' do: {:times
  ^Parser of: ({:i
    var result is Array < (my self tryMatch: i).
    my times times: {
      result push: (my self tryMatch: ((result @ -1) leftOver)).
    }.
    result is result from: 0 length: (result count - 1).
    (result count > 0) ifTrue: {
      result is ParsedObject matched: ((result @ -1) matched?) value: (result fmap: {:v ^v value.}) leftOver: ((result @ -1) leftOver).
    }, else: {
      result is ParsedObject matched: False value: Nil leftOver: (i leftOver).
    }.
    ^result.
  } set: 'self' value: me, set: 'times' value: times).
}.
Parser on: 'combine' do: {
  ^Parser of: ({:i
    var result is my self tryMatch: i.
    ^ParsedObject matched: result matched? value: (result value join: '') leftOver: result leftOver.
  } set: 'self' value: me).
}.
Parser on: 'mapTo:' do: {:v
  ^Parser of: ({:i
    var result is my self tryMatch: i.
    ^ParsedObject matched: result matched? value: (my value) leftOver: result leftOver.
  } set: 'self' value: me, set: 'value' value: v).
}.
Parser on: 'mapToFunc:' do: {:f
  ^Parser of: ({:i
    var result is my self tryMatch: i.
    ^ParsedObject matched: result matched? value: (my f applyTo: (result value)) leftOver: result leftOver.
  } set: 'self' value: me, set: 'f' value: f).
}.
Parser learn: '<' means: 'matchAfterButReturn:'.
Parser learn: '>' means: 'matchBeforeButReturn:'.
Parser learn: '|' means: 'matchSequence:'.


var ParsedObject is Object new.
ParsedObject on: 'matched:value:leftOver:' do: {:m:v:l
  ^me cnew: {
    my truth is m.
    my value is v.
    my leftOver is l.
  }.
}.
ParsedObject on: 'matched?' do: {^my truth.}.
ParsedObject on: 'leftOver' do: {^my leftOver.}.
ParsedObject on: 'matched:' do: {:v my truth is v.}.
ParsedObject on: 'leftOver:' do: {:v my leftOver is v.}.
ParsedObject on: 'value' do: {^my value.}.
ParsedObject on: 'respondTo:' do: {:m ^my leftOver respondTo: m.}.
ParsedObject on: 'respondTo:and:' do: {:m:a ^my leftOver respondTo: m and: a.}.
ParsedObject on: 'respondTo:and:and:' do: {:m:a:a1 ^my leftOver respondTo: m and: a and: a1.}.

var digit is Parser of: {:i var result is '0123456789' contains: (i at: 0). result ifTrue: {Pen write: 'digit $$i', brk.}. ^ParsedObject matched: result value: (result either: (i at: 0) or: Nil) leftOver: (result either: (i skip: 1) or: i). }.
var chars is {:chars
  ^'Parser of: {:i var result is (var c is \'%s\') contains: (i at: 0). ^ParsedObject matched: result value: (result either: (i at: 0) or: Nil) leftOver: (result either: (i skip: 1) or: i).}' formatObjects: [chars], eval.
}.
var string is {:string
  ^'Parser of: {:i var m is \'%s\'. var result is i from: 0 length: m length, = m. ^ParsedObject matched: result value: (result either: m or: Nil) leftOver: (result either: (i skip: m length) or: i).}' formatObjects: [string], eval.
}.
var regex is {:string
  string is '^' + string.
  ^'Parser of: {:i var m is \'%s\'. var result is False. var literal is \'\'. i findPattern: m do: {:parts result is True. literal is parts @ 0. ^\'\'.}. result ifTrue: {Pen write: \'regex|\' + m + \' \' + i, brk.}. ^ParsedObject matched: result value: (result either: literal or: Nil) leftOver: (i skip: (literal length)).}' formatObjects: [string], eval.
}.
var anything is Parser of: {:i ^ParsedObject matched: (i length > 0) value: ((i length > 0) either: (i @ 0) or: Nil) leftOver: ((i length > 0) either: (i skip: 1) or: i).}.

var anycharbut is {:chars
  ^'Parser of: {:i var result is \'%s\' contains: (i at: 0), not. ^ParsedObject matched: result value: (result either: (i at: 0) or: Nil) leftOver: (result either: (i skip: 1) or: i).}' formatObjects: [chars], eval.
}.
var anythingbutstr is {:str
  ^'Parser of: {:i
    var pattern is \'^([^(%s)])\'.
    var result is False.
    var value is Nil.
    var leftOver is i.
    i findPattern: pattern do: {:parts
       result is True.
       value is parts @ 1.
       leftOver is i skip: (value length).
    }.
    ^ParsedObject matched: result value: value leftOver: leftOver.
  }' formatObjects: [str], eval.
}.
var whitespace is chars applyTo: ' \t\n\r'.

# var json_str is (chars applyTo: '"') > (anycharbut applyTo: '"', plus maybe combine) < (chars applyTo: '"').
# var json_bool is string applyTo: 'true', mapTo: True, or: (string applyTo: 'false', mapTo: False).
# var json_null is string applyTo: 'null'.
# var json_number is ((regex applyTo: '-?(?:0|[1-9]\\\\d*)(?:\\\\.\\\\d+)?(?:[eE][+-]?\\\\d+)?') mapToFunc: {:i ^i toNumber.}).
# var json_value is json_number or: json_bool, or: json_null, or: json_str.
# var json_array is  (chars applyTo: '[') > ((json_number < (regex applyTo: '\\\\s*,\\\\s*', maybe)) plus) < (chars applyTo: ']').
# json_value is json_value or: json_array.
# var json_obj is (chars applyTo: '{') > (json_value < (whitespace plus maybe | chars applyTo: ':', | whitespace plus maybe) > json_value) maybe < (chars applyTo: '}').
#
#
# Pen write: (JSON serialize: (json_array tryMatch: '[123, 0.5e30, 1223]')), brk.


String on: 'countOf:' do: {:str
  var remaining is me.
  var ind is Nil.
  var count is 0.
  {^(ind is remaining indexOf: str) >=: 0.} whileTrue: {
    count +=: 1.
    remaining is remaining skip: (ind + (str length)).
  }.
  ^count.
}.

#Codon parser
var codon_- is regex applyTo: '(TAA)|(TAG)|(TGA)'.
var Codons is Map new
  put: 'F' at: 'TTT', put: 'F' at: 'TTC', put: 'L' at: 'TTA', put: 'L' at: 'TTG',
  put: 'S' at: 'TCT', put: 'S' at: 'TCC', put: 'S' at: 'TCA', put: 'S' at: 'TCG',
  put: 'Y' at: 'TAT', put: 'Y' at: 'TAC', put: '-' at: 'TAA', put: '-' at: 'TAG',
  put: 'C' at: 'TGT', put: 'C' at: 'TGC', put: '-' at: 'TGA', put: 'W' at: 'TGG',
  put: 'L' at: 'CTT', put: 'L' at: 'CTC', put: 'L' at: 'CTA', put: 'L' at: 'CTG',
  put: 'P' at: 'CCT', put: 'P' at: 'CCC', put: 'P' at: 'CCA', put: 'P' at: 'CCG',
  put: 'H' at: 'CAT', put: 'H' at: 'CAC', put: 'Q' at: 'CAA', put: 'Q' at: 'CAG',
  put: 'R' at: 'CGT', put: 'R' at: 'CGC', put: 'R' at: 'CGA', put: 'R' at: 'CGG',
  put: 'I' at: 'ATT', put: 'I' at: 'ATC', put: 'I' at: 'ATA', put: 'M' at: 'ATG',
  put: 'T' at: 'ACT', put: 'T' at: 'ACC', put: 'T' at: 'ACA', put: 'T' at: 'ACG',
  put: 'N' at: 'AAT', put: 'N' at: 'AAC', put: 'K' at: 'AAA', put: 'K' at: 'AAG',
  put: 'S' at: 'AGT', put: 'S' at: 'AGC', put: 'R' at: 'AGA', put: 'R' at: 'AGG',
  put: 'V' at: 'GTT', put: 'V' at: 'GTC', put: 'V' at: 'GTA', put: 'V' at: 'GTG',
  put: 'A' at: 'GCT', put: 'A' at: 'GCC', put: 'A' at: 'GCA', put: 'A' at: 'GCG',
  put: 'D' at: 'GAT', put: 'D' at: 'GAC', put: 'E' at: 'GAA', put: 'E' at: 'GAG',
  put: 'G' at: 'GGT', put: 'G' at: 'GGC', put: 'G' at: 'GGA', put: 'G' at: 'GGG'.

var codon is chars applyTo: 'ATGC', times: 3, combine mapToFunc: {:codon ^Codons @ codon.}.

var parser is codon plus combine.

printExecTime applyTo: 'Parser Generation'.

var to_tr is File new: '/home/ali/Downloads/Telegram Desktop/Sample.txt', read replace: '\r\n' with: ''.

printExecTime applyTo: 'Reading File and preparing data'.

Pen red write: 'Statistics:', brk.
'ATGC' characters each: {:i:v
  var occ is to_tr countOf: v.
  occ = 0 continue.
  Pen green write: ('Stats of %s:\n\toccurences: %d, percentage: %%%s' formatObjects: [v, occ, (100 * occ / (to_tr length))]), resetColor brk.
}.

?>Math out the first occurence
<?.
var split is to_tr split: 'ATG'.
Pen write: 'START met at ' + (var b is split at: 0, length / 3), brk.
Pen write: 'STOP finished at ' + ((split at: 1, findPattern: '(TAG)|(TGA)|(TAA)' do: {^'TAG'.}, split: 'TAG', at: 0, length / 3) + b + 1), brk.

printExecTime applyTo: 'Statistics'.

var parsed is parser tryMatch: to_tr.

printExecTime applyTo: 'Parsing'.

Pen red write: 'Translation:\n', resetColor write: parsed value, brk.

printExecTime applyTo: 'Print translation'.

b is parsed value indexOf: 'M'.
var e is parsed value skip: b, indexOf: '-', + b + 1.
Pen write: 'From the actual translation: occurence is at ' + ([b, e]), brk.

printExecTime applyTo: 'Finding M-'.
