Broom memoryLimit: 1024 * 1024 * 1024 * 12.
Broom mode: 0.

var Complex is Object new genAccessors: 'real', genAccessors: 'imaginary'.
Complex on: 'real:imaginary:' do: {:r:i
  my real is r.
  my imaginary is i.
}.
Complex on: 'abs' do: {^(my imaginary toPowerOf: 2) + (my real toPowerOf: 2) sqrt.}.
Complex on: 'add:' do: {:c
  ^Complex new real: (my real + (c real)) imaginary: (my imaginary + (c imaginary)).
}.
Complex on: 'mul:' do: {:c
  ^Complex new real: ((my real * (c real)) - (my imaginary * (c imaginary))) imaginary: ((my real * (c imaginary)) + (my imaginary * (c real))).
}.
Complex learn: '*' means: 'mul:'.
Complex learn: '+' means: 'add:'.


var Mandel is {:z:maxiter
  var c is z.
  var ret is maxiter.
  var iter is 0.
  {^(iter < maxiter) & ((z abs) < 2).} whileTrue: {
      ret is iter.
      z is z * z + c.
      iter +=: 1.
  }.
  ^ret.
}.

var linspace is {:r:split
  r unpack: ['init', 'end'].
  ^Iterator rangeFrom: init to: end step: (end - init / split), toArray.
}.

var mandelSet is {:x:y:d:maxiter
    var r1 is linspace applyTo: x and: (d at: 0).
    var r2 is linspace applyTo: y and: (d at: 1).
    ^[r1,r2,
      (
      (r1 * r2) fmap: {:v ^Mandel applyTo: (Complex new message: 'real:imaginary:' arguments: v) and: maxiter.}
      )
    ].
}.

var mandel is (mandelSet applyTo: [-2,0.5] and: [-1.25,1.25] and: [30,30] and: 80) @ 2.

# Broom sweep.

var prot is SDL new.
var w is 100.
var h is 100.
var window is prot
 set: 'windowName' to: 'Razavi = Douchebag',
 set: 'windowHeight' to: h,
 set: 'windowWidth' to: w,
 init.


nit is h.
var c is Color rgb: [0,0,0].
var r1 is linspace applyTo: [0,100] and: 100.
var r2 is linspace applyTo: [0,100] and: 100.
var space is r1 * r2.

eh is 0.
{ ^True. } whileTrue: {
    Clock wait: 200000.
    space each: {:i:v
      var x is v @ 0.
      var y is v @ 1.
      var a is (x / 20 * 9 + (y / 20)) floor.
      c set: 'red' to: (mandel at: a).
      window setPixelWithX: x andY: y toColor: c.
    }.
    window update.
    eh +=: 1.
    Broom sweep: mandel.
    mandel is (mandelSet applyTo: [(-2 + (eh / 100)),(0.5 + (eh / 100))] and: [(-1.25 + (eh / 100)),(1.25 + (eh / 100))] and: [30,30] and: 80) @ 2.
}.

Program waitForInput.
SDL quit.
