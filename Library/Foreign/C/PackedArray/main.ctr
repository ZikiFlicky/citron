Program warning: 'This module is highly unstable and subject to rewrite'.
var TYPEMAP is Map new
  put: 0  at: 'uint8',
  put: 1  at: 'sint8',
  put: 2  at: 'uint16',
  put: 3  at: 'sint16',
  put: 4  at: 'uint32',
  put: 5  at: 'sint32',
  put: 6  at: 'uint64',
  put: 7  at: 'sint64',
  put: 8  at: 'uchar',
  put: 9  at: 'schar',
  put: 10 at: 'ushort',
  put: 11 at: 'sshort',
  put: 12 at: 'uint',
  put: 13 at: 'sint',
  put: 14 at: 'ulong',
  put: 15 at: 'slong',
  put: 16 at: 'float',
  put: 17 at: 'double',
  put: 18 at: 'longdouble'.
var PackedArray is Object cnew: {
  array => Nil.
}.
PackedArray on: 'sameFor:' do: {:struct
  ^me cnew: {
    array => struct.
  }.
}.
PackedArray on: 'initWithType:count:' do: {:t:len
  t is (const TYPEMAP at: t) or: t.
  my array is CTypes packed: t count: len.
}.
PackedArray on: 'array' do: {\ my array }.
PackedArray on: 'at:' do: {:idx ^my array at: idx. }.
PackedArray on: 'put:at:' do: {:v:idx my array put: v at: idx. }.
PackedArray on: 'count' do: {\ my array count }.
PackedArray on: 'copy' do: {
  var self is me.
  ^me cnew: {
    array => self array new.
  }.
}.
PackedArray on: 'each:' do: {:blk
  my count times: {:i
    Pen writeln: i.
    blk applyTo: i and: (me at: i) and: me.
  }.
}.
PackedArray on: 'each_v:' do: {
  my count times: {:i
    blk applyTo: (me at: i).
  }.
}.
PackedArray on: 'fmap:' do: {:blk
  var n is me copy.
  me each: {:i:v
    n put: (blk applyTo: v) at: i.
  }.
  ^n.
}.
PackedArray on: 'toString' do: {\ 'PackedArray' }.
import export: PackedArray as: 'PackedArray'.
