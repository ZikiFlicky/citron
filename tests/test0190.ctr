#System operations (Clock, Dice, Pen, Shell, Program) should not leak memory.

usedMemory1 is 0.
usedMemory2 is 0.
usedMemory3 is 0.
usedMemory4 is 0.

Broom mode: 0.

Clock time.
Clock wait: 1.
Pen write: Program argCount, brk.
Program argument: 0.
Dice roll.
Dice rollWithSides: 10.
Dice rawRandomNumber.
Pen write: (Shell echo: 'Hello').

Broom sweep.

usedMemory1 is Broom keptAlloc.
#Pen write: usedMemory1, brk.

Clock time.
Clock wait: 1.
Pen write: Program argCount, brk.
Program argument: 0.
Dice roll.
Dice rollWithSides: 10.
Dice rawRandomNumber.
Pen write: (Shell echo: 'Hello').


Broom sweep.
usedMemory2 is Broom keptAlloc.
#Pen write: usedMemory2, brk.

Clock time.
Clock wait: 1.
Pen write: Program argCount, brk.
Program argument: 0.
Dice roll.
Dice rollWithSides: 10.
Dice rawRandomNumber.
Pen write: (Shell echo: 'Hello').

Broom sweep.
usedMemory3 is Broom keptAlloc.
#Pen write: usedMemory3, brk.

#memory counters need not necessarily be equal, but lets call it a leak (libgc limitation)
( (usedMemory1 = usedMemory2) & (usedMemory1 = usedMemory3) & (usedMemory2 = usedMemory3) ) ifTrue: {
	Pen write: 'No memory leaks here'.
}, ifFalse: {
	Pen write: 'Leaking memory...'.
}.
