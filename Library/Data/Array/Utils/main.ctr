Array on: 'groupBy:' do: {:fn
  var rt is Map new.
  me each_v: {:v
    var r is fn applyTo: v.
    (rt contains: r)
      ifTrue: { rt at: r, push: v. },
      else:   { rt put: (Array < v) at: r. }.
  }.
  ^rt.
}.

Array on: 'nubBy:' do: {:self:fn
  ^me count = 0
    either: me copy
    or: {
      var rt is Array new.
      self each_v: {:v
        (rt any: \:x fn applyTo: x and: v) ifFalse: { rt push: v. }.
      }.
      ^rt.
    }.
}.

Array on: 'nub' do: {
  ^me nubBy: \:x:y x = y.
}.

Array on: 'delete:by:' do: {:self:x:eq
  ^self count = 0
    either: self copy
    or: {
      ^(eq applyTo: x and: var y is self head)
        either: {^self tail.}
        or: {^[y] + (self tail delete: x by: eq).}.
    }.
}.

Array on: 'delete:' do: {:x
  ^me delete: x by: \:x x = x.
}.

Array on: 'difference:' do: {:self:ys
  ^ys foldl: (\:x:y x delete: y) accumulator: me.
}.

Array on: 'union:by:' do: {:ys:eq
  var xs is me.
  ^xs + (xs foldl: (\:x:y x delete: y by: eq) accumulator: (ys nubBy: eq)).
}.

Array on: 'union:' do: {:ys
  ^me union: ys by: \:x:y x = y.
}.

Array on: 'intersect:by:' do: {:ys:eq
  var xs is me.
  ^(xs count min: ys count) = 0
    either: Array new
    or: {
      ^(xs fmap: \:x (ys any: \:y eq applyTo: x and: y) either: [x] or: []) sum.
    }.
}.
