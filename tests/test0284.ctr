Broom memoryLimit: 1024 * 1024 * 128.

rept is 2000.

ptr is CTypes pointer.
int is CTypes sint.
cif is CIF new setABI: 0 return: Nil argTypes: [].
ll is CTypes loadLibrary: '/lib64/libpython3.so'.
pyinit is ll Py_Initialize.
pyfinalize is ll Py_Finalize.
pyrun is ll PyRun_SimpleString.

cif call: pyinit withArgs: [].
cif setABI: 0 return: Nil argTypes: [ptr].
ptime is 0.
pbest is 10 pow: 10.
rept times: {:i
  ptr destruct.
  ptr is CTypes fromString: 'len( "    " * %d )' % [rept - i].
  ptime +=: (var bestc is (Clock timeExecutionOf: {
      cif call: pyrun withArgs: [ptr].
  })).
  pbest is pbest min: bestc.
}.

cif setABI: 0 return: Nil argTypes: [].
cif call: pyfinalize withArgs: [].

Broom sweep.

ll is CTypes loadLibrary: Nil.
cif setABI: 0 return: Nil argTypes: [ptr].
execstr is ll execute_string.

rtime is 0.
rbest is 10 pow: 10.
rept times:{:i
  ptr destruct.
  ptr is CTypes fromString: '( \'    \' * %d ) length' % [rept - i].
  rtime +=: (var bestc is (Clock timeExecutionOf: {
        cif call: execstr withArgs: [ptr].
  })).
  rbest is rbest min: bestc.
}.

Broom sweep.

#Pen write: 'Python statistics:
#    ran command: len( "    " * ($$rept - i) ),
#    total time: %d,
#    best time: %d,
#    average over $$rept : %d
#Citron statistics:
#    ran command: (\'    \' * ($$rept - i)) length,
#    total time: %d,
#    best time: %d,
#    average over $$rept : %d
#' % [ptime, pbest, (ptime / rept), rtime, rbest, (rtime / rept)], brk.
