name                             = Citron
file_extensions []               = ctr;
// textmate_compatible              = false
textmate_compatible              = true
##################################################
#  Styles                                        #
##################################################

styles[] {
   .punctuation : style {
      color                           = #aaf
      pygments_scope                  = Name
      textmate_scope                  = entity.name
   }
   .variable : style {
      textmate_scope                  = variable
      pygments_scope                  = Name.Variable
   }
   .sl_defn : style {
      color                           = violet
      pygments_scope                  = Keyword.Pseudo
      textmate_scope                  = keyword.other.unit
   }
   .sl_assign : style {
      color                           = violet_red
      pygments_scope                  = Keyword.Reserved
      textmate_scope                  = keyword.control
   }
   .sl_comment : style {
      color                           = grey
      textmate_scope                  = comment
      pygments_scope                  = Comment
      highlight_js_scope              = .hljs-comment
      ace_scope                       = comment
   }
   .sl_pragma : style {
      color                           = purple
      textmate_scope                  = markup.deleted
      pygments_scope                  = Generic.Deleted
      highlight_js_scope              = .hljs-deletion
      ace_scope                       = markup.deleted
   }
   .sl_message : style {
      color                           = purple
      pygments_scope                  = Name.Decorator
      textmate_scope                  = entity.name.function
   }
   .sl_string : style {
      color                           = yellow
      pygments_scope                  = String
      textmate_scope                  = string
   }
   .sl_strescape : style {
      color                           = light_blue
      pygments_scope                  = String.Escape
      textmate_scope                  = constant.character.escape
   }
   .sl_rawstring : style {
      color                           = light_green
      pygments_scope                  = String.Regex
      textmate_scope                  = string.regexp
   }
   .sl_number : style {
      color                           = green
      pygments_scope                  = Number
      textmate_scope                  = constant.numeric
   }
   .text : style {
      color                           = white
      pygments_scope                  = Generic
      textmate_scope                  = text
   }
   .sl_pragma_invalid : style {
      textmate_scope                  = invalid.illegal
      ace_scope                       = invalid.illegal
      pygments_scope                  = Generic.Error
   }
   .sl_backref : style {
      textmate_scope                  = entity.name.type
      ace_scope                       = entity.name.type
      pygments_scope                  = Name.Function
      italic                          = true
      color                           = gold
   }
}



##################################################
#  Contexts                                      #
##################################################

contexts[] {
   main : context {
      : pattern {
         regex      \= (?:([^\s\d:.,\[\]\(\)\{\}\#][^\s:.,\[\]\(\)\{\}\#]*)(\s+)(‹)([^›]*?)(›))
         styles []   = .sl_defn, .punctuation, .sl_string, .sl_rawstring, .sl_string;
      }
      : inline_push {
         regex            \= (?:(@comptime)\b)
         styles []         = .sl_pragma;
         default_style     = .punctuation
         : pop {

            regex      \= (\s*)

            styles []   = .punctuation;

         }

      }
      : inline_push {
         regex      \= \b(var|my|const|frozen)\b
         styles []   = .sl_defn;
         default_style     = .variable
         : pop {
            regex      \= (?:(&&|&)?([^\s\d:.,\[\]\(\)\{\}\#][^\s:.,\[\]\(\)\{\}\#]*))
            styles []   = .sl_strescape, .variable;
         }

      }

      // : set {
      //    regex      \= (\.)
      //    styles []   = .punctuation;
      //    context []  = main;
      // }
      : inline_push {
         regex            \= (?:(pure)(\s*\{))
         styles []         = .sl_defn, .punctuation;

         : pop {

            regex      \= (\})

            styles []   = .punctuation;

         }

         : pattern {

            regex      \= (.)

            styles []   = .text;

         }


      }
      : pattern {
         regex      \= (\$[!,'`](?!=\s))
         styles []   = .sl_strescape;
      }

      : pattern {

         regex      \= (\$(?=\())

         styles []   = .sl_strescape;

      }

      : pop {
         regex      \= (\.)
         styles []   = .punctuation;
      }

      : pattern {
         regex      \= ([\[\]\(\)\^\}])
         styles []   = .punctuation;
      }

      : pattern {
         regex      \= (?:(\s*)(\bis\b|\:\=|\=\>)(\s*))
         styles []   = .text, .sl_assign, .text;
      }
      : inline_push {
         regex      \= (?:(\?>))
         styles []   = .sl_rawstring;

         : pop {
            regex      \= (<\?)
            styles []   = .sl_rawstring;
         }

         : pattern {
            regex      \= (.)
            styles []   = .sl_rawstring;
         }
      }
      : pattern {
         regex      \= (0[xX][0-9a-fA-F]+|0[cC][0-7]+|0[bB][01]+|\d+\.\d+|\d+)
         styles []   = .sl_number;
      }

      : push {
         regex      \= (‹)
         styles []   = .sl_string;
         context []  = fstring;
      }

      : push {
         regex      \= (')
         styles []   = .sl_string;
         context []  = string;
      }

      : inline_push {
         regex            \= (?:(\\)((?:(?:\:[^\s\d:.,\[\]\(\)\{\}\#][^\s:.,\[\]\(\)\{\}\#]*\s*)|(?:\:\(.*\)))+))
         styles []         = .sl_assign, .sl_defn;
         default_style     = .text

         : pop {
            regex      \= (\s*?)
            styles []   = .punctuation;
         }

      }
      : inline_push {
         regex            \= (?:(\{)(asm)(\s*(?:\:)\s*(?:\w+))*(\s*(?:intel|att|at\&t))?(\s*\(.*\)\s*))
         styles []         = .punctuation, .sl_pragma, .sl_defn, .sl_pragma, .sl_pragma;
         : pop {
            regex      \= (\})
            styles []   = .punctuation;
         }
         : push {
            regex      \= (?:\s*)
            styles []   = .punctuation;
            context []  = asm;
         }
      }
      : inline_push {
         regex      \= (?:(\{)((?:\s*\:(?:(?:[^\s\d:.,\[\]\(\)\{\}\#][^\s:.,\[\]\(\)\{\}\#]*)|(?:\(.*\))))*))
         styles []   = .punctuation, .sl_defn;
         default_style     = .punctuation
         : pop {
            regex            \= (\s*)
            styles []         = .punctuation;
         }

      }
      : inline_push {
         regex      \= (?:(\#:))
         styles []   = .sl_comment;
         : pop {
            regex      \= (?:(?:(declare)(\s+)(infixr|infixl|lazyev)(\s*)(.*))|(?:(language)(\s+)(.*))$)
            styles []   = .sl_pragma, .punctuation, .sl_rawstring, .punctuation, .sl_message, .sl_pragma, .punctuation, .sl_rawstring;
         }
         default_style     = .sl_pragma
      }
      : pattern {
         regex      \= (\#.*$)
         styles []   = .sl_comment;
      }
      : inline_push {
            regex            \= ((?:[^\s\d:.,\[\]\(\)\{\}\#][^\s:.,\[\]\(\)\{\}\#]*)\:)
            styles []         = .sl_message;
            default_style     = .punctuation
            : pop {
               regex            \= (\s*)
               styles []         = .punctuation;
            }
         }
      : inline_push {
         regex      \= (\\)
         styles []         = .sl_strescape;
         default_style     = .sl_assign
         : pop {
            regex      \= (?:([^:]\w*)|(\:(?:[^\s\d:.,\[\]\(\)\{\}\#][^\s:.,\[\]\(\)\{\}\#]*)))
            styles []   = .sl_strescape, .sl_assign;
         }
      }
      : inline_push {
         regex            \= (?:(\s+)([^\s\d:.,\[\]\(\)\{\}\#]|[-+*&%$@!=";/\\<>?~]+)(\s+))
         styles []         = .punctuation, .sl_message, .punctuation;
         default_style     = .punctuation
         : pop {
            regex            \= (\s*)
            styles []         = .punctuation;
         }
      }

      : inline_push {
         regex      \= (?:(\`)([^\s\d:.,\[\]\(\)\{\}\#][^\s:.,\[\]\(\)\{\}\#]*)(\1))
         styles []   = .sl_strescape, .sl_backref, .sl_strescape;
         default_style     = .punctuation
         : pop {
            regex      \= (\s*?)
            styles []   = .punctuation;
         }
      }
       : inline_push {
         regex      \= (?:(\`?)([^\s\d:.,\[\]\(\)\{\}\#][^\s:.,\[\]\(\)\{\}\#]*)(\1))
         styles []   = .sl_strescape, .text, .sl_strescape;
         default_style     = .punctuation
         : pop {
            regex      \= (\s*?)
            styles []   = .punctuation;
         }
      }
   }
   string : context {
      :pop {
         regex      \= ((?!<\\)')
         styles []   = .sl_string;
      }

      : pattern {
         regex      \= (?:(\$\$)(\w+)\b)
         styles []   = .sl_strescape, .sl_message;
      }

      : pattern {
         regex      \= (\\[^xu])
         styles []   = .sl_strescape;
      }

      : pattern {
         regex      \= (?:(\\[xuXU])([{]?)([0-9a-fA-F]+)([}]?))
         styles []   = .sl_strescape, .sl_strescape, .sl_number,.sl_strescape;
      }

      : push {
         regex      \= (\$\{\{)
         styles []         = .sl_strescape;
         context []  = expr_interpolation;
      }


      : pattern {
         regex      \= (.)
         styles []   = .sl_string;
      }
   }
   fstring : context {
      : pop {
         regex      \= (›)
         styles []   = .sl_string;
      }

      : pattern {
         regex      \= (.)
         styles []   = .sl_string;
      }

   }
   expr_interpolation: context {
      : pop {
         regex      \= (\}\}\$)
         styles []   = .sl_strescape;
      }

      : inline_push {
         regex      \= \b(var|my|const|frozen)\b
         styles []   = .sl_defn;
         default_style     = .variable
         : pop {
            regex      \= ([^\s\d:.,\[\]\(\)\{\}\#][^\s:.,\[\]\(\)\{\}\#]*)
            styles []   = .variable;
         }

      }

      : inline_push {
         regex            \= (?:(pure)(\s*\{))
         styles []         = .sl_defn, .punctuation;

         : pop {

            regex      \= (\})

            styles []   = .punctuation;

         }

         : pattern {

            regex      \= (.)

            styles []   = .text;

         }


      }
      : pattern {
         regex      \= (\$[!,'`](?!=\s))
         styles []   = .sl_strescape;
      }

      : pattern {

         regex      \= (\$(?=\())

         styles []   = .sl_strescape;

      }

      : pattern {
         regex      \= ([\[\]\(\)\^\}])
         styles []   = .punctuation;
      }

      : pattern {
         regex      \= (?:(\s*)(\bis\b|\:\=|\=\>)(\s*))
         styles []   = .text, .sl_assign, .text;
      }
      : inline_push {
         regex      \= (?:(\?>))
         styles []   = .sl_rawstring;

         : pop {
            regex      \= (<\?)
            styles []   = .sl_rawstring;
         }

         : pattern {
            regex      \= (.)
            styles []   = .sl_rawstring;
         }
      }
      : pattern {
         regex      \= (0[xX][0-9a-fA-F]+|0[cC][0-7]+|0[bB][01]+|\d+\.\d+|\d+)
         styles []   = .sl_number;
      }

      : push {
         regex      \= (')
         styles []   = .sl_string;
         context []  = string;
      }

      : inline_push {
         regex            \= (?:(\\)((?:\:[^\s\d:.,\[\]\(\)\{\}\#][^\s:.,\[\]\(\)\{\}\#]*\s*)+))
         styles []         = .sl_assign, .sl_defn;
         default_style     = .text

         : pop {
            regex      \= (\s*?)
            styles []   = .punctuation;
         }

      }
      : inline_push {
         regex            \= (?:(\{)(asm)(\s*(?:\:)\s*(?:\w+))*(\s*(?:intel|att|at\&t))?(\s*\(.*\)\s*))
         styles []         = .punctuation, .sl_pragma, .sl_defn, .sl_pragma, .sl_pragma;
         : pop {
            regex      \= (\})
            styles []   = .punctuation;
         }
         : push {
            regex      \= (?:\s*)
            styles []   = .punctuation;
            context []  = asm;
         }
      }
      : inline_push {
         regex      \= (?:(\{)((?:\s*\:(?:[^\s\d:.,\[\]\(\)\{\}\#][^\s:.,\[\]\(\)\{\}\#]*))*))
         styles []   = .punctuation, .sl_defn;
         default_style     = .punctuation
         : pop {
            regex            \= (\s*)
            styles []         = .punctuation;
         }

      }
      : inline_push {
         regex      \= (?:(\#:))
         styles []   = .sl_comment;
         : pop {
            regex      \= (?:(?:(declare)(\s+)(infixr|infixl|lazyev)(\s*)(.*))|(?:(language)(\s+)(.*))$)
            styles []   = .sl_pragma, .punctuation, .sl_rawstring, .punctuation, .sl_message, .sl_pragma, .punctuation, .sl_rawstring;
         }
         default_style     = .sl_pragma
      }
      : pattern {
         regex      \= (\#.*$)
         styles []   = .sl_comment;
      }
      : inline_push {
            regex            \= ((?:[^\s\d:.,\[\]\(\)\{\}\#][^\s:.,\[\]\(\)\{\}\#]*)\:)
            styles []         = .sl_message;
            default_style     = .punctuation
            : pop {
               regex            \= (\s*)
               styles []         = .punctuation;
            }
         }
      : inline_push {
         regex      \= (\\)
         styles []         = .sl_strescape;
         default_style     = .sl_assign
         : pop {
            regex      \= (?:([^:]\w*)|(\:(?:[^\s\d:.,\[\]\(\)\{\}\#][^\s:.,\[\]\(\)\{\}\#]*)))
            styles []   = .sl_strescape, .sl_assign;
         }
      }
      : inline_push {
         regex            \= (?:(\s+)([^\s\d:.,\[\]\(\)\{\}\#]|[-+*&%$@!=";/\\<>?~]+)(\s+))
         styles []         = .punctuation, .sl_message, .punctuation;
         default_style     = .punctuation
         : pop {
            regex            \= (\s*)
            styles []         = .punctuation;
         }
      }

      : inline_push {
         regex      \= (?:(\`)([^\s\d:.,\[\]\(\)\{\}\#][^\s:.,\[\]\(\)\{\}\#]*)(\1))
         styles []   = .sl_strescape, .sl_backref, .sl_strescape;
         default_style     = .punctuation
         : pop {
            regex      \= (\s*?)
            styles []   = .punctuation;
         }
      }
       : inline_push {
         regex      \= (?:(\`?)([^\s\d:.,\[\]\(\)\{\}\#][^\s:.,\[\]\(\)\{\}\#]*)(\1))
         styles []   = .sl_strescape, .text, .sl_strescape;
         default_style     = .punctuation
         : pop {
            regex      \= (\s*?)
            styles []   = .punctuation;
         }
      }
   }

   // dummy construct
   asm : context {
       : pop {
          regex      \= (?=\})
          styles []   = .punctuation;
       }
      : pattern {
         regex      \= (.*)
         styles []   =  .sl_comment;
      }
   }
}
