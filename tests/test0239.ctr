#Can we override more representations?

a is True.



a on: 'toString' do: {
	var answer is Nil.
	( me = True ) ifTrue: {
		answer is 'Yep'.
	}, else: {
		answer is 'Nope'.
	}.
	^ answer.
}.

a on: 'toNumber' do: {
	var answer is Nil.
	( me = True ) ifTrue: {
		answer is 10.
	}, else: {
		answer is 20.
	}.
	^ answer.
}.

b is 666.

b on: 'toString' do: {
	^ 'Devil'.
}.

b on: 'toBoolean' do: {
	^ False.
}.


Pen write: a, brk.  #Yep
Pen write: (90 + a), brk. #100
Pen write: b, brk. #Devil
Pen write: (True & b), brk. #False

a is Array < 'hello' ; 'world' ; True ; Nil ; 666. #Nil should be present as well.
a is a + ( Array < 1 ).
Pen write: a, brk.
Pen write: ((Map new) put: Nil at: Nil), brk.
Pen write: a sum, brk. #668 cause True == 1

#returning something else than a string in toString should not cause segfault but Exception
{
	a on: 'toString' do: { ^ Nil. }.
	a is '' + a. 
} catch: { :error
	Pen write: 'Error noted: ' + error, brk.
}, run.


#returning something else than a string in toString should not cause segfault but Exception
{
	a on: 'toNumber' do: { ^ Nil. }.
	a is 3 * a. 
} catch: { :error
	Pen write: 'Error noted: ' + error, brk.
}, run.

#returning something else than a boolean in toBoolean should not cause segfault but Exception
{
	a on: 'toBoolean' do: { ^ Nil. }.
	a is True & a. 
} catch: { :error
	Pen write: 'Error noted: ' + error, brk.
}, run.




#returning something else than a string in toString should not cause segfault but Exception
{
	a on: 'toString' do: { ^ False. }.
	a is '' + a. 
} catch: { :error
	Pen write: 'Error noted: ' + error, brk.
}, run.


#returning something else than a string in toString should not cause segfault but Exception
{
	a on: 'toNumber' do: { ^ True. }.
	a is 3 * a. 
} catch: { :error
	Pen write: 'Error noted: ' + error, brk.
}, run.

#returning something else than a boolean in toBoolean should not cause segfault but Exception
{
	a on: 'toBoolean' do: { ^ 1. }.
	a is True & a. 
} catch: { :error
	Pen write: 'Error noted: ' + error, brk.
}, run.




#returning something else than a string in toString should not cause segfault but Exception
{
	a on: 'toString' do: { ^ 1. }.
	a is '' + a. 
} catch: { :error
	Pen write: 'Error noted: ' + error, brk.
}, run.


#returning something else than a string in toString should not cause segfault but Exception
{
	a on: 'toNumber' do: { ^ ''. }.
	a is 3 * a. 
} catch: { :error
	Pen write: 'Error noted: ' + error, brk.
}, run.

#returning something else than a boolean in toBoolean should not cause segfault but Exception
{
	a on: 'toBoolean' do: { ^ ''. }.
	a is True & a. 
} catch: { :error
	Pen write: 'Error noted: ' + error, brk.
}, run.





#returning something else than a string in toString should not cause segfault but Exception
{
	a on: 'toString' do: { ^ (Map new). }.
	a is '' + a. 
} catch: { :error
	Pen write: 'Error noted: ' + error, brk.
}, run.


#returning something else than a string in toString should not cause segfault but Exception
{
	a on: 'toNumber' do: { ^ (Object new). }.
	a is 3 * a. 
} catch: { :error
	Pen write: 'Error noted: ' + error, brk.
}, run.

#returning something else than a boolean in toBoolean should not cause segfault but Exception
{
	a on: 'toBoolean' do: { ^ (Object new). }.
	a is True & a. 
} catch: { :error
	Pen write: 'Error noted: ' + error, brk.
}, run.

