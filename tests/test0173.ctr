#Array operations should not leak memory

usedMemory1 is 0.
usedMemory2 is 0.
usedMemory3 is 0.
usedMemory4 is 0.

Broom mode: 0.

a is Array < 'hello' ; 'world' ; True ; Nil ; 666.
a is a + ( Array < 1 ).
Pen write: ( 'sum: ' + ( a sum ) ), brk.
Pen write: ( 'min: ' + ( a min ) ), brk.
Pen write: ( 'max: ' + ( a max ) ), brk.
Pen write: ( '3rd: ' + ( a @ 2 ) ), brk.
Pen write: ( 'prd: ' + ( a product ) ), brk.
a sort: { :a :b ^ (b - a). }.
a each: { :i :e Pen write: ( i ), brk. }.

Broom sweep.
usedMemory1 is Broom keptAlloc.
#Pen write: usedMemory1, brk.

a is Array < 'hello' ; 'world' ; True ; Nil ; 666.
a is a + ( Array < 1 ).
Pen write: ( 'sum: ' + ( a sum ) ), brk.
Pen write: ( 'min: ' + ( a min ) ), brk.
Pen write: ( 'max: ' + ( a max ) ), brk.
Pen write: ( '3rd: ' + ( a @ 2 ) ), brk.
Pen write: ( 'prd: ' + ( a product ) ), brk.
a sort: { :a :b ^ (b - a). }.
a each: { :i :e Pen write: ( i ), brk. }.


Broom sweep.
usedMemory2 is Broom keptAlloc.
#Pen write: usedMemory2, brk.

a is Array < 'hello' ; 'world' ; True ; Nil ; 666.
a is a + ( Array < 1 ).
Pen write: ( 'sum: ' + ( a sum ) ), brk.
Pen write: ( 'min: ' + ( a min ) ), brk.
Pen write: ( 'max: ' + ( a max ) ), brk.
Pen write: ( '3rd: ' + ( a @ 2 ) ), brk.
Pen write: ( 'prd: ' + ( a product ) ), brk.
a sort: { :a :b ^ (b - a). }.
a each: { :i :e Pen write: ( i ), brk. }.


Broom sweep.
usedMemory3 is Broom keptAlloc.
#Pen write: usedMemory3, brk.

#memory counters need to be equal!
( (usedMemory1 = usedMemory2) & (usedMemory1 = usedMemory3) & (usedMemory2 = usedMemory3) ) ifTrue: {
	'No memory leaks here'.
}, ifFalse: {
	'Leaking memory...'.
}.
