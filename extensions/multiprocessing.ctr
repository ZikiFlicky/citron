Broom memoryLimit: 1024 * 1024 * 1024 * 2.
var DeferLock is Object new.
var Multiprocessing is Object new.

DeferLock on: 'init' do: {my lock is False.}.
DeferLock on: 'lock' do: {my lock ifTrue: {thisBlock error: 'Already locked.'.}. my lock is True.}.
DeferLock on: 'unlock' do: {my lock is False.}.

Multiprocessing on: 'from:to:numProcs:do:' do: { :from :to :numProcs :block
    ^(me from: from to: to numProcs: numProcs do: block options: '').
}.
Multiprocessing on: 'from:to:numProcs:do:options:' do: { :from :to :numProcs :block :opts
    var eachCount is ((to - from) / numProcs) ceil.
    var left is (to - from) - (eachCount * numProcs).
    var children is Array with: { :i
        var count is eachCount.
        (i = (numProcs - 1)) ifTrue: {count is eachCount - left.}.
        var myfrom is (eachCount * i) + from.
        var myend is ((eachCount * i) + from + count - 1).
        (opts containsPattern: 'v') ifTrue: {Pen write: 'Child $$i from $$myfrom till $$myend', brk.}.
        ^Program new: { :p
          p listen: {:m
            myfrom to: myend step: 1 do: { :inner block applyTo: inner and: i. }.
          }.
        }.
    } count: numProcs.
    ^children.
}.

ImportLib export: Multiprocessing as: 'Multiprocessing' namespace: 'Extensions'.
